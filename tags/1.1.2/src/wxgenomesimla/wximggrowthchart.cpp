//
// C++ Implementation: wximggrowthchart
//
// Description: 
//
//
// Author: Eric Torstenson <torstenson@chgr.mc.vanderbilt.edu>, (C) 2007
//
// Copyright: See COPYING file that comes with this distribution
//
//
#include "wximggrowthchart.h"
// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif


#include "utility/strings.h"
#include "dlggrowthreview.h"


namespace GenomeSIM {

namespace GUI {

using namespace Utility;

/*!
 * wxImgGrowthChart type definition
 */

IMPLEMENT_DYNAMIC_CLASS( wxImgGrowthChart, wxPanel )

/*!
 * wxImgGrowthChart event table definition
 */

BEGIN_EVENT_TABLE( wxImgGrowthChart, wxPanel )

////@begin wxImgGrowthChart event table entries
    EVT_SIZE( wxImgGrowthChart::OnSize )
    EVT_PAINT( wxImgGrowthChart::OnPaint )
    EVT_ERASE_BACKGROUND( wxImgGrowthChart::OnEraseBackground )
    EVT_LEFT_DCLICK( wxImgGrowthChart::OnLeftDClick )


////@end wxImgGrowthChart event table entries

END_EVENT_TABLE()



/*!
 * wxImgGrowthChart constructors
 */

wxImgGrowthChart::wxImgGrowthChart( ) : growthChartFilename(""), refreshGrowthChart(false)
{
}

wxImgGrowthChart::wxImgGrowthChart( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style ) : growthChartFilename(""), refreshGrowthChart(false)
{
    Create(parent, id, pos, size, style);
}

/*!
 * wxImgGrowthChart creator
 */

bool wxImgGrowthChart::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin wxImgGrowthChart member initialisation
////@end wxImgGrowthChart member initialisation

////@begin wxImgGrowthChart creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
////@end wxImgGrowthChart creation
    return TRUE;
}

/*!
 * Control creation for wxImgGrowthChart
 */

void wxImgGrowthChart::CreateControls()
{    
////@begin wxImgGrowthChart content construction
    // Generated by DialogBlocks, Tue 04 Dec 2007 01:49:09 PM CST (Personal Edition)

    wxImgGrowthChart* itemPanel27 = this;

////@end wxImgGrowthChart content construction
}

/*!
 * wxEVT_SIZE event handler for ID_GROWTH_CHART
 */

void wxImgGrowthChart::OnSize( wxSizeEvent& event )
{
	RefreshGrowthChart();

////@begin wxEVT_SIZE event handler for ID_GROWTH_CHART in wxImgGrowthChart.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_SIZE event handler for ID_GROWTH_CHART in wxImgGrowthChart. 
}

/*!
 * wxEVT_PAINT event handler for ID_GROWTH_CHART
 */

void wxImgGrowthChart::OnPaint( wxPaintEvent& event )
{	

	wxPaintDC dc(this);
	dc.DrawBitmap(imgData, 0, 0, true);
	//event.Skip();
}

/*!
 * wxEVT_ERASE_BACKGROUND event handler for ID_GROWTH_CHART
 */

void wxImgGrowthChart::OnEraseBackground( wxEraseEvent& event )
{	
//	RefreshImage();
////@begin wxEVT_ERASE_BACKGROUND event handler for ID_GROWTH_CHART in wxImgGrowthChart.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_ERASE_BACKGROUND event handler for ID_GROWTH_CHART in wxImgGrowthChart. 
}

/*!
 * Should we show tooltips?
 */

bool wxImgGrowthChart::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap wxImgGrowthChart::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxImgGrowthChart bitmap retrieval
    return wxNullBitmap;
////@end wxImgGrowthChart bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon wxImgGrowthChart::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxImgGrowthChart icon retrieval
    return wxNullIcon;
////@end wxImgGrowthChart icon retrieval
}


void wxImgGrowthChart::SetImagePng(const char *png) {
	if (!imgData.LoadFile(wxT(png), wxBITMAP_TYPE_PNG) || !imgData.IsOk())
		cout<<"Unable to load file, "<<png<<"\n";
	RefreshImage();
}


void wxImgGrowthChart::RefreshImage() {
	Refresh();
	Update();
}

void wxImgGrowthChart::InitAppController(AppController *ctl) {
	appController = ctl;
	RefreshGrowthChart();
}

void wxImgGrowthChart::Commit() {

}


void wxImgGrowthChart::RefreshSettings() {

}


void wxImgGrowthChart::RefreshGrowthChart() {
	if (appController) {
		GrowthRate *growth = appController->parameters.GetGrowthRate();
		wxRect chartSize = GetRect();
		growthChartFilename = growth->DrawGrowthChart("tmp", initGen, finalGen, period, chartSize.GetWidth(), chartSize.GetHeight(), false);
		SetImagePng(growthChartFilename.c_str());
		
		stringstream ss;
		growth->GenerateReport( ss, 0);
		//txtGrowthParams->ChangeValue(wxT(ss.str().c_str()));
		refreshGrowthChart = true;
	}
}

void wxImgGrowthChart::SetGraphPoints(uint initGen, uint finalGen, uint period) {
	this->initGen 	= initGen;
	this->finalGen 	= finalGen;
	this->period	= period;
}


void wxImgGrowthChart::SetModel(const char *modelConfiguration) {
	appController->parameters.SetGrowthRate( modelConfiguration );
	RefreshGrowthChart();
}

/*!
 * wxEVT_LEFT_DOWN event handler for ID_GROWTH_CHART
 */

void wxImgGrowthChart::OnLeftDClick( wxMouseEvent& event )	{
	DlgGrowthReview dlg(NULL, wxID_ANY, _("Review Growth Chart"));
	string filename = appController->parameters.GetGrowthRate()->DrawGrowthChart( "tmp", initGen, finalGen, (uint)(period * 0.10));
	cout<<"Setting filename: "<<filename<<"\n";
	dlg.SetFilename( filename.c_str() );
	dlg.ShowModal();
	event.Skip();
}


}

}
