/////////////////////////////////////////////////////////////////////////////
// Name:        wxldanalysis.cpp
// Purpose:     
// Author:      Eric Torstenson
// Modified by: 
// Created:     Wed 05 Dec 2007 02:48:35 PM CST
// RCS-ID:      
// Copyright:   Copyright 2007 Ritchie Lab - See COPYING for License 
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Wed 05 Dec 2007 02:48:35 PM CST

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "wxldanalysis.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "wxldanalysis.h"
#include <wx/filedlg.h>
#include <wx/file.h>
#include <iostream>
////@begin XPM images
////@end XPM images

namespace GenomeSIM {

namespace GUI {

using namespace std;
/*!
 * wxLdAnalysis type definition
 */

IMPLEMENT_DYNAMIC_CLASS( wxLdAnalysis, wxPanel )

/*!
 * wxLdAnalysis event table definition
 */

BEGIN_EVENT_TABLE( wxLdAnalysis, wxPanel )

////@begin wxLdAnalysis event table entries
    EVT_TEXT_ENTER( ID_TXT_MAX_SNP_DIST, wxLdAnalysis::OnTxtMaxSnpDistEnter )

    EVT_TEXT_ENTER( ID_TXT_REPORT_BUFFER_SIZE, wxLdAnalysis::OnTxtReportBufferSizeEnter )

    EVT_TEXT_ENTER( ID_TXT_TARGET_POP_SIZE, wxLdAnalysis::OnTxtTargetPopSizeEnter )

    EVT_CHECKBOX( ID_CHK_WRITE_PAIRWISE_LD, wxLdAnalysis::OnChkWritePairwiseLdClick )

    EVT_CHECKBOX( ID_CHK_PLOT_R, wxLdAnalysis::OnChkPlotRClick )

    EVT_CHECKBOX( ID_CHK_PLOT_DPRIME, wxLdAnalysis::OnChkPlotDprimeClick )

    EVT_TEXT_ENTER( ID_TXT_REPORT_STYLE_SHEET, wxLdAnalysis::OnTxtReportStyleSheetEnter )

    EVT_BUTTON( ID_SELECT_STYLE_SHEET, wxLdAnalysis::OnSelectStyleSheetClick )

    EVT_TEXT_ENTER( ID_TXT_FONT_NAME, wxLdAnalysis::OnTxtFontNameEnter )

    EVT_BUTTON( ID_CMD_SELECT_FONT, wxLdAnalysis::OnCmdSelectFontClick )

////@end wxLdAnalysis event table entries

END_EVENT_TABLE()

/*!
 * wxLdAnalysis constructors
 */

wxLdAnalysis::wxLdAnalysis( ) : hasChanged(false) {
}

wxLdAnalysis::wxLdAnalysis( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style ) : hasChanged(false) {
    Create(parent, id, pos, size, style);
}

void wxLdAnalysis::Commit() {
	cout<<"Saving font filename: "<<txtFontFilename->GetValue()<<"\n";
	Simulation::Visualization::ImageParameters::font = txtFontFilename->GetValue().c_str();
	appController->parameters.SetFontFilename(txtFontFilename->GetValue().c_str());
	appController->parameters.SetMaxSnpDistance(ExtractInteger(txtMaxSnpDist));
	appController->parameters.SetStyleSheetFilename(txtStyleSheetFilename->GetValue().c_str());
	appController->parameters.SetReportBufferSize(ExtractInteger(txtReportBufferSize));
	appController->parameters.SetTargetPopulation(ExtractInteger(txtTargetPopulation));
	appController->parameters.WritePairwiseLD(chkWritePairwiseLD->GetValue());
	appController->parameters.PlotDPrime(chkPlotDPrime->GetValue());
	appController->parameters.PlotRSquared(chkPlotRSquared->GetValue());

	appController->parameters.FastLD(chkFastLD->GetValue());
	hasChanged = false;
}


bool wxLdAnalysis::HasChanged() {
	return hasChanged;
}

void wxLdAnalysis::RefreshSettings() {
	txtFontFilename->SetValue(wxT(appController->parameters.GetFontFilename().c_str()));
	UpdateTextField(txtMaxSnpDist, (int)appController->parameters.GetMaxSnpDistance());
	txtStyleSheetFilename->SetValue(wxT(appController->parameters.GetStyleSheetFilename().c_str()));
	UpdateTextField(txtReportBufferSize, (int)appController->parameters.GetReportBufferSize());
	UpdateTextField(txtTargetPopulation, (int)appController->parameters.GetTargetPopulation());
	chkWritePairwiseLD->SetValue(appController->parameters.WritePairwiseLD());
	chkPlotDPrime->SetValue(appController->parameters.PlotDPrime());
	chkPlotRSquared->SetValue(appController->parameters.PlotRSquared());
	chkFastLD->SetValue(appController->parameters.FastLD());
}

void wxLdAnalysis::InitAppController( AppController *ctrl) {
	appController = ctrl;
}

/*!
 * wxLdAnalysis creator
 */

bool wxLdAnalysis::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin wxLdAnalysis member initialisation
    txtMaxSnpDist = NULL;
    txtReportBufferSize = NULL;
    txtTargetPopulation = NULL;
    chkWritePairwiseLD = NULL;
    chkPlotRSquared = NULL;
    chkPlotDPrime = NULL;
    chkFastLD = NULL;
    txtStyleSheetFilename = NULL;
    txtFontFilename = NULL;
////@end wxLdAnalysis member initialisation

////@begin wxLdAnalysis creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end wxLdAnalysis creation
    return TRUE;
}

/*!
 * Control creation for wxLdAnalysis
 */

void wxLdAnalysis::CreateControls()
{    
////@begin wxLdAnalysis content construction
    wxLdAnalysis* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxGROW|wxALL, 5);

    itemBoxSizer3->Add(5, 10, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    wxFlexGridSizer* itemFlexGridSizer5 = new wxFlexGridSizer(4, 3, 0, 0);
    itemFlexGridSizer5->AddGrowableCol(1);
    itemBoxSizer3->Add(itemFlexGridSizer5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemPanel1, wxID_STATIC, _("Max. SNP Distance:"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    itemFlexGridSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 0);

    txtMaxSnpDist = new wxTextCtrl( itemPanel1, ID_TXT_MAX_SNP_DIST, _("500000"), wxDefaultPosition, wxSize(150, -1), 0, wxTextValidator(wxFILTER_NUMERIC) );
    if (wxLdAnalysis::ShowToolTips())
        txtMaxSnpDist->SetToolTip(_("Max. Distance between 2 SNPs permitted for calculating pairwise LD."));
    itemFlexGridSizer5->Add(txtMaxSnpDist, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemFlexGridSizer5->Add(50, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxStaticText* itemStaticText9 = new wxStaticText( itemPanel1, wxID_STATIC, _("Report Buffer Size:"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    if (wxLdAnalysis::ShowToolTips())
        itemStaticText9->SetToolTip(_("Specify how many SNPs around the block of interest are rendered on each of the detailed block reports. If a value of 25 is selected, the LD plot will contain at least 52 SNPs."));
    itemFlexGridSizer5->Add(itemStaticText9, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 0);

    txtReportBufferSize = new wxTextCtrl( itemPanel1, ID_TXT_REPORT_BUFFER_SIZE, _("65"), wxDefaultPosition, wxSize(150, -1), 0, wxTextValidator(wxFILTER_NUMERIC) );
    if (wxLdAnalysis::ShowToolTips())
        txtReportBufferSize->SetToolTip(_("Max. Distance between 2 SNPs permitted for calculating pairwise LD."));
    itemFlexGridSizer5->Add(txtReportBufferSize, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemFlexGridSizer5->Add(50, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxStaticText* itemStaticText12 = new wxStaticText( itemPanel1, wxID_STATIC, _("Target Population Size:"), wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT );
    if (wxLdAnalysis::ShowToolTips())
        itemStaticText12->SetToolTip(_("Specify how many SNPs around the block of interest are rendered on each of the detailed block reports. If a value of 25 is selected, the LD plot will contain at least 52 SNPs."));
    itemFlexGridSizer5->Add(itemStaticText12, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 0);

    txtTargetPopulation = new wxTextCtrl( itemPanel1, ID_TXT_TARGET_POP_SIZE, _("125000"), wxDefaultPosition, wxSize(150, -1), 0, wxTextValidator(wxFILTER_NUMERIC) );
    if (wxLdAnalysis::ShowToolTips())
        txtTargetPopulation->SetToolTip(_("Causes the simulation to stop advancing populations once the population has reached the size specified here. "));
    itemFlexGridSizer5->Add(txtTargetPopulation, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemFlexGridSizer5->Add(50, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemFlexGridSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxVERTICAL);
    itemFlexGridSizer5->Add(itemBoxSizer16, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    chkWritePairwiseLD = new wxCheckBox( itemPanel1, ID_CHK_WRITE_PAIRWISE_LD, _("Write Pairwise LD"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxCHK_2STATE );
    chkWritePairwiseLD->SetValue(false);
    if (wxLdAnalysis::ShowToolTips())
        chkWritePairwiseLD->SetToolTip(_("When checked, genomeSIMLA will produce a text report containing ALL pairwise LD for SNPs within Max. SNP Distance of each other"));
    itemBoxSizer16->Add(chkWritePairwiseLD, 0, wxALIGN_RIGHT|wxALL, 0);

    chkPlotRSquared = new wxCheckBox( itemPanel1, ID_CHK_PLOT_R, _("Plot R Squared"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxCHK_2STATE );
    chkPlotRSquared->SetValue(true);
    if (wxLdAnalysis::ShowToolTips())
        chkPlotRSquared->SetToolTip(_("When checked, genomeSIMLA will generate R-Squared LD Plots"));
    itemBoxSizer16->Add(chkPlotRSquared, 0, wxALIGN_RIGHT|wxALL, 0);

    chkPlotDPrime = new wxCheckBox( itemPanel1, ID_CHK_PLOT_DPRIME, _("Plot D-Prime"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxCHK_2STATE );
    chkPlotDPrime->SetValue(true);
    if (wxLdAnalysis::ShowToolTips())
        chkPlotDPrime->SetToolTip(_("When checked, genomeSIMLA will generate D Prime LD plots"));
    itemBoxSizer16->Add(chkPlotDPrime, 0, wxALIGN_RIGHT|wxALL, 0);

    chkFastLD = new wxCheckBox( itemPanel1, ID_CHK_FAST_LD, _("Sampled LD"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    chkFastLD->SetValue(true);
    if (wxLdAnalysis::ShowToolTips())
        chkFastLD->SetToolTip(_("Turning on Sampled LD calculations is recommended when scanning a growth curve for ideal LD patterns. Users will have to manually execute LD Analysis prior to selecting disease loci, though."));
    itemBoxSizer16->Add(chkFastLD, 0, wxALIGN_RIGHT|wxALL, 0);

    itemFlexGridSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer3->Add(55, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer23 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer3->Add(itemBoxSizer23, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer24 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer23->Add(itemBoxSizer24, 0, wxGROW|wxALL, 0);

    wxStaticText* itemStaticText25 = new wxStaticText( itemPanel1, wxID_STATIC, _("Report Style-Sheet:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer24->Add(itemStaticText25, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 0);

    itemBoxSizer24->Add(55, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer27 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer23->Add(itemBoxSizer27, 0, wxGROW|wxALL, 0);

    txtStyleSheetFilename = new wxTextCtrl( itemPanel1, ID_TXT_REPORT_STYLE_SHEET, _("http://chgr.mc.vanderbilt.edu/genomeSIMLA/genomesim.css"), wxDefaultPosition, wxSize(300, -1), 0 );
    if (wxLdAnalysis::ShowToolTips())
        txtStyleSheetFilename->SetToolTip(_("Path to the Style-Sheet Referenced in the HTML Report"));
    itemBoxSizer27->Add(txtStyleSheetFilename, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxButton* itemButton29 = new wxButton( itemPanel1, ID_SELECT_STYLE_SHEET, _("..."), wxDefaultPosition, wxSize(50, -1), 0 );
    if (wxLdAnalysis::ShowToolTips())
        itemButton29->SetToolTip(_("Browse for the stylesheet (this will incorprate a full path, rather than a relative one, which might be less portable)"));
    itemBoxSizer27->Add(itemButton29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemBoxSizer3->Add(55, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer31 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer3->Add(itemBoxSizer31, 0, wxGROW|wxALL, 0);

    wxBoxSizer* itemBoxSizer32 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer31->Add(itemBoxSizer32, 0, wxALIGN_LEFT|wxALL, 0);

    wxStaticText* itemStaticText33 = new wxStaticText( itemPanel1, wxID_STATIC, _("Font:"), wxDefaultPosition, wxSize(150, -1), wxALIGN_LEFT );
    itemBoxSizer32->Add(itemStaticText33, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 0);

    wxBoxSizer* itemBoxSizer34 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer31->Add(itemBoxSizer34, 0, wxGROW|wxALL, 5);

    txtFontFilename = new wxTextCtrl( itemPanel1, ID_TXT_FONT_NAME, _("FontBold.ttf"), wxDefaultPosition, wxSize(150, -1), 0 );
    if (wxLdAnalysis::ShowToolTips())
        txtFontFilename->SetToolTip(_("Max. Distance between 2 SNPs permitted for calculating pairwise LD."));
    itemBoxSizer34->Add(txtFontFilename, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxButton* itemButton36 = new wxButton( itemPanel1, ID_CMD_SELECT_FONT, _("..."), wxDefaultPosition, wxSize(50, -1), 0 );
    if (wxLdAnalysis::ShowToolTips())
        itemButton36->SetToolTip(_("Browse for the Font"));
    itemBoxSizer34->Add(itemButton36, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

////@end wxLdAnalysis content construction
}

/*!
 * Should we show tooltips?
 */

bool wxLdAnalysis::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap wxLdAnalysis::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxLdAnalysis bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end wxLdAnalysis bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon wxLdAnalysis::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxLdAnalysis icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end wxLdAnalysis icon retrieval
}
/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_MAX_SNP_DIST
 */

void wxLdAnalysis::OnTxtMaxSnpDistEnter( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_MAX_SNP_DIST in wxLdAnalysis.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_MAX_SNP_DIST in wxLdAnalysis. 
}


/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_FONT_NAME
 */

void wxLdAnalysis::OnTxtFontNameEnter( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_FONT_NAME in wxLdAnalysis.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_FONT_NAME in wxLdAnalysis. 
}


/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_REPORT_STYLE_SHEET
 */

void wxLdAnalysis::OnTxtReportStyleSheetEnter( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_REPORT_STYLE_SHEET in wxLdAnalysis.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_REPORT_STYLE_SHEET in wxLdAnalysis. 
}


/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_REPORT_BUFFER_SIZE
 */

void wxLdAnalysis::OnTxtTargetPopSizeEnter( wxCommandEvent& event )
{
	appController->parameters.SetTargetPopulation(ExtractInteger(txtTargetPopulation));
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_WRITE_PAIRWISE_LD
 */

void wxLdAnalysis::OnChkWritePairwiseLdClick( wxCommandEvent& event )
{
	hasChanged = true;
////@begin wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_WRITE_PAIRWISE_LD in wxLdAnalysis.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_WRITE_PAIRWISE_LD in wxLdAnalysis. 
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_PLOT_R
 */

void wxLdAnalysis::OnChkPlotRClick( wxCommandEvent& event )
{
	hasChanged = true;
////@begin wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_PLOT_R in wxLdAnalysis.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_PLOT_R in wxLdAnalysis. 
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_PLOT_DPRIME
 */

void wxLdAnalysis::OnChkPlotDprimeClick( wxCommandEvent& event )
{
	hasChanged = true;
////@begin wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_PLOT_DPRIME in wxLdAnalysis.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHK_PLOT_DPRIME in wxLdAnalysis. 
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */

void wxLdAnalysis::OnSelectStyleSheetClick( wxCommandEvent& event )
{
	wxString filename = txtFontFilename->GetLineText(0);
	if (! wxFile::Exists(filename.c_str()))
		filename = wxT("");
	wxFileDialog cssSelect(this, wxT("Select Report Stylesheet"), wxT(""), filename, wxT("Style Sheet(*.css)|*.css"), wxOPEN);
	if (cssSelect.ShowModal() == wxID_OK) {
		wxString path = cssSelect.GetPath();
		txtStyleSheetFilename->ChangeValue(path);
	}

}

bool wxLdAnalysis::VerifyForRun() {
	return true;
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON1
 */

void wxLdAnalysis::OnCmdSelectFontClick( wxCommandEvent& event )		{
	wxString filename = txtFontFilename->GetLineText(0);
	if (! wxFile::Exists(filename.c_str()))
		filename = "";
	wxFileDialog fontSelect(this, wxT("Select Font for Charting"), wxT(""), filename, wxT("True Type Files (*.ttf)|*.ttf;*.TTF"), wxOPEN);
	if (fontSelect.ShowModal() == wxID_OK) {
		wxString path = fontSelect.GetPath();
		txtFontFilename->ChangeValue(path);
		appController->parameters.SetFontFilename(path.c_str());
	}
}

/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_REPORT_BUFFER_SIZE
 */

void wxLdAnalysis::OnTxtReportBufferSizeEnter( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_REPORT_BUFFER_SIZE in wxLdAnalysis.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_REPORT_BUFFER_SIZE in wxLdAnalysis. 
}



}

}

