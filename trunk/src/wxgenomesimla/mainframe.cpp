/////////////////////////////////////////////////////////////////////////////
// Name:        mainframe.cpp
// Purpose:     
// Author:      Eric Torstenson
// Modified by: 
// Created:     Wed 05 Dec 2007 02:12:05 PM CST
// RCS-ID:      
// Copyright:   Copyright 2007 Ritchie Lab - See COPYING for License 
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Wed 05 Dec 2007 02:12:05 PM CST

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "mainframe.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes
#include "mainframe.h"
#include "wxdlgsavecurrent.h"
#include <wx/filename.h>

//#include "wxdlgreview.h"

#include "wxwizrunsimulation.h"
#include "wxwizardsimulatedata.h"

//#include "wxwizperformanalysis.h"
//#include "wxdlgselectgeneration.h"
#include "wxdlgprocessmonitor.h"
#include "wxdlgconfigurediseasemodel.h"
//#include "wxperformdetailedanalysis.h"
////@begin XPM images
////@end XPM images
#include "genomesimla.h"
#include "wxdlgbasichtmlreport.h"
#include "wxdialogtaskalert.h"
#include "locusmanager.h"

/*
#define ID_CONTINUE_SIMULATION 203123
#define ID_DETAILED_ANALYSIS   203124
#define ID_OPEN_REPORT         203125
#define ID_EXTRACT_DATASETS    203126
*/
/*!
 * MainFrame type definition
 */

IMPLEMENT_CLASS( GenomeSIM::GUI::MainFrame, wxFrame )

/*!
 * MainFrame event table definition
 */

BEGIN_EVENT_TABLE( GenomeSIM::GUI::MainFrame, wxFrame )

////@begin MainFrame event table entries
    EVT_MENU( wxID_NEW, MainFrame::OnNewClick )

    EVT_MENU( wxID_OPEN, MainFrame::OnOpenClick )

    EVT_MENU( wxID_SAVE, MainFrame::OnSaveClick )

    EVT_MENU( wxID_SAVEAS, MainFrame::OnSaveAsClick )

    EVT_MENU( wxID_RESET, MainFrame::OnResetClick )

    EVT_MENU( wxID_EXIT, MainFrame::OnExitClick )


////@end MainFrame event table entries

    EVT_BUTTON( ID_MENU_LAUNCH, MainFrame::OnMenuLaunchClick )
    EVT_BUTTON( ID_MENU_EXTRACT_DATASETS_GEN_0, MainFrame::OnMenuExtractDatasetsGen0Click )

	EVT_MENU(ID_CONTINUE_SIMULATION, MainFrame::OnContinueSimulation)
	EVT_MENU(ID_DETAILED_ANALYSIS, MainFrame::OnDetailedAnalysis)
	EVT_MENU(ID_OPEN_REPORT, MainFrame::OpenReport)
	EVT_MENU(ID_EXTRACT_DATASETS, MainFrame::ExtractData)

	EVT_BUTTON(ID_CMD_OPEN_REPORT, MainFrame::OpenReport)
	EVT_BUTTON(ID_CMD_CONTINUE_SIMULATION, MainFrame::OnContinueSimulation)
	EVT_BUTTON(ID_CMD_EXTRACT_DATASETS, MainFrame::ExtractData)
	EVT_BUTTON(ID_CMD_DETAILED_ANALYSIS, MainFrame::OnDetailedAnalysis)

	EVT_MENU(wxID_ABOUT, MainFrame::OnAbout )

END_EVENT_TABLE()

namespace GenomeSIM {

namespace GUI {



/*!
 * MainFrame constructors
 */

MainFrame::MainFrame( )
{
}

MainFrame::MainFrame( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style ) : modelList(NULL) 
{
    Create( parent, id, caption, pos, size, style );
}

void MainFrame::Commit() {
	pageGeneralSettings->Commit();
	pageLdAnalysis->Commit();
	pageLociCreation->Commit();
	pageLocusReport->Commit();
	pReporting->Commit();
}

void MainFrame::RefreshSettings() {
	pageGeneralSettings->RefreshSettings();
	pageLdAnalysis->RefreshSettings();
	pageLocusReport->RefreshSettings();
	pageLociCreation->RefreshSettings();
	pReporting->RefreshSettings();
}

bool MainFrame::HasChanged() {
	bool hasChanged = pageGeneralSettings->HasChanged();
	if (!hasChanged)
		hasChanged = pageLdAnalysis->HasChanged();
	if (!hasChanged)
		hasChanged = pageLociCreation->HasChanged();
	if (!hasChanged)
		hasChanged = pageLocusReport->HasChanged();
	if (!hasChanged)
		hasChanged = pReporting->HasChanged();
	return hasChanged;
}

/*
	wxFileName gaCfgFile;
	gaCfgFile.Assign(_(userDir.c_str()), "gaSettings.conf");

	char cmd[9600];

	if (!gaCfgFile.DirExists()) { 
		cout<<"Creating directory: "<<userDir<<"\n";
		gaCfgFile.Mkdir();
	}

	if (!gaCfgFile.FileExists()) {
		
		cout<<"Creating default ga settings: "<<appDir.c_str()<<"/*.ga -> "<<userDir.c_str()<<"\n";
		
	
		wxFileName gaMaster;
		sprintf(cmd, "cp %s/*.ga  %s", appDir.c_str(), userDir.c_str());
		int rv = system(cmd);
	}
	
	*/

void MainFrame::InitAppController(AppController *ctrl) {

	//We need to figure out where the initial font will be. This is different on each system
	wxAppTraits *traits = wxGetApp().GetTraits();
	string userDir = traits->GetStandardPaths().GetUserDataDir().c_str();
	string appDir = traits->GetStandardPaths().GetResourcesDir().c_str();
	string userConfigDir = traits->GetStandardPaths().GetUserConfigDir().c_str();

	cout<<"User Dir: "<<userDir<<"\n"
		<<"App Dir : "<<appDir<<"\n"
		<<"Usr Cfg : "<<userConfigDir<<"\n";

	wxFileName datadir (_(appDir.c_str()));
	datadir.SetFullName(_("FreeMonoBold.ttf"));
	ctrl->parameters.SetFontFilename(datadir.GetFullPath().c_str());
	
	if (modelList == NULL) {
		wxFileName modelSource(wxT(userDir.c_str()), wxT("models.conf"));
//		modelSource.Assign(_(userDir.c_str()), _("models.conf"));
//		modelSource.AppendDir(".genomeSIMLA");		//shouldn't be necessary with getuserdatadir
		if (!modelSource.DirExists())
			if (!modelSource.Mkdir(0700, wxPATH_MKDIR_FULL)){
				cerr<<"There was a problem creating the directory: "<<modelSource.GetFullPath()<<"\n";
				abort();	

			}
		modelList = ModelList::Instance(modelSource.GetFullPath());
	}
	appController = ctrl;

	pageLociCreation->SetChromosomes(&fileBasedChromosomes);
	pageLocusReport->SetChromosomes(&fileBasedChromosomes);

	if (pageGeneralSettings) 
		pageGeneralSettings->InitAppController(ctrl);
	if (pageLdAnalysis)
		pageLdAnalysis->InitAppController(ctrl);
	if (pageLociCreation)
		pageLociCreation->InitAppController(ctrl);
	if (pageLocusReport)
		pageLocusReport->InitAppController(ctrl);
	if (pReporting)
		pReporting->InitAppController(ctrl);
	
}

MainFrame::~MainFrame() {
	vector<FileBasedChromosome *>::iterator itr = fileBasedChromosomes.begin();
	vector<FileBasedChromosome *>::iterator end = fileBasedChromosomes.end();

	while (itr != end) 
		delete *itr++;

	//Release the main copy
	if (modelList)
		modelList->Release();

}
/*!
 * MainFrame creator
 */

bool MainFrame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin MainFrame member initialisation
////@end MainFrame member initialisation

////@begin MainFrame creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end MainFrame creation

    return TRUE;
}

/*!
 * Control creation for MainFrame
 */

void MainFrame::CreateControls()
{    
////@begin MainFrame content construction
    MainFrame* itemFrame1 = this;

    wxMenuBar* menuBar = new wxMenuBar;
    wxMenu* itemMenu5 = new wxMenu;
    itemMenu5->Append(wxID_NEW, _("&New"), _("Start a new simulation with details settings"), wxITEM_NORMAL);
    itemMenu5->Append(wxID_OPEN, _("&Open"), _("Open a previous simulation configuration"), wxITEM_NORMAL);
    itemMenu5->Append(ID_MENU_OPEN_RECENT, _("Open Recent"), _T(""), wxITEM_NORMAL);
    itemMenu5->AppendSeparator();
    itemMenu5->Append(wxID_SAVE, _("&Save"), _("Save configuration to file"), wxITEM_NORMAL);
    itemMenu5->Append(wxID_SAVEAS, _("Save &As"), _("Save configuration details under a new name"), wxITEM_NORMAL);
    itemMenu5->AppendSeparator();
    itemMenu5->Append(wxID_RESET, _("R&evert To Last Save"), _("Reload the configuration from the last save"), wxITEM_NORMAL);
    itemMenu5->Append(wxID_EXIT, _("E&xit"), _("Exit genomeSIMLA"), wxITEM_NORMAL);
	itemMenu5->AppendSeparator();
    menuBar->Append(itemMenu5, _("&File"));
	
	wxMenu *menu = new wxMenu;
	menu->Append(wxID_ABOUT, _("A&bout"), _("About genomeSIMLA"), wxITEM_NORMAL);
	menuBar->Append(menu, _("&genomeSIMLA"));

    itemFrame1->SetMenuBar(menuBar);

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemFrame1->SetSizer(itemBoxSizer2);

    wxNotebook* itemNotebook3 = new wxNotebook( itemFrame1, ID_NB_MAINCFG, wxDefaultPosition, wxSize(750, 525), wxNB_DEFAULT|wxNB_TOP );

    itemBoxSizer2->Add(itemNotebook3, 1, wxGROW|wxALL, 5);

    statusBar = new wxStatusBar( itemFrame1, ID_STATUSBAR1, wxST_SIZEGRIP|wxNO_BORDER );
    statusBar->SetFieldsCount(1);
    itemFrame1->SetStatusBar(statusBar);

////@end MainFrame content construction

	pageGeneralSettings = new wxPageGeneralSettings(itemNotebook3, ID_PAGE_LOCI_CREATION, wxDefaultPosition, wxDefaultSize ,wxSUNKEN_BORDER|wxTAB_TRAVERSAL);
	itemNotebook3->AddPage(pageGeneralSettings, _("General Settings"));

	pageLdAnalysis = new wxLdAnalysis(itemNotebook3, ID_PAGE_LD_ANALYSIS, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL);
	itemNotebook3->AddPage(pageLdAnalysis, _("LD Analysis"));

	pageLociCreation = new wxPageLociCreation(itemNotebook3, ID_PAGE_LOCI_CREATION, wxDefaultPosition, wxDefaultSize ,wxSUNKEN_BORDER|wxTAB_TRAVERSAL);
	itemNotebook3->AddPage(pageLociCreation, _("Loci Generation"));

	pageLocusReport = new wxPageLocusReporting(itemNotebook3, ID_PAGE_LOCUS_REPORTING, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL);
	itemNotebook3->AddPage(pageLocusReport, _("Locus Reporting"));
	
	pReporting = new wxPanelReports(itemNotebook3, appController, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL);
	itemNotebook3->AddPage(pReporting, _("Simulation Results"));

}

/*!
 * Should we show tooltips?
 */

bool MainFrame::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap MainFrame::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin MainFrame bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end MainFrame bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon MainFrame::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin MainFrame icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end MainFrame icon retrieval
}



/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for wxID_NEW
 */

void MainFrame::OnNewClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for wxID_NEW in MainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for wxID_NEW in MainFrame. 
}


void MainFrame::OnAbout( wxCommandEvent& event ){
	wxDlgBasicHtmlReport rpt(this);

	rpt.Append("<HTML><HEAD><TITLE>About wxGenomeSIMLA</TITLE></HEAD><BODY><CENTER><H2>");
	rpt.Append(version.GetVersion().c_str());
	rpt.Append("</H2><P>");
	rpt.Append(version.date.c_str());
	rpt.Append("<P>A Time-Forward Simulation<P></BODY></HTML>");

	rpt.ShowModal();

}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for wxID_OPEN
 */

void MainFrame::OnOpenClick( wxCommandEvent& event )
{
	wxFileDialog fileSelect(this, wxT("Select Simulation to Load"), wxT(""), appController->parameters.GetConfigFilename().c_str(), wxT("Simulation Files (*.sim)|*.sim;*.SIM"), wxOPEN);
	if (fileSelect.ShowModal() == wxID_OK) {
		try {
			appController->SetConfigurationFilename(fileSelect.GetPath().c_str());
		} catch (Utility::Exception::General &e) {
			wxMessageBox(e.GetErrorMessage().c_str());
			return;
		}
		SetTitle(fileSelect.GetPath());
		RefreshSettings();
	}

}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for wxID_SAVE
 */

void MainFrame::OnSaveClick( wxCommandEvent& event )
{
	Save();

}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for wxID_SAVEAS
 */

void MainFrame::SaveAs() {
	bool doSave = true;
	Commit();
	wxFileDialog fileSelect(this, wxT("Select New Filename"), wxT(""), appController->parameters.GetConfigFilename().c_str(), wxT("Simulation Files (*.sim)|*.sim;*.SIM"), wxSAVE|wxOVERWRITE_PROMPT);
	if (fileSelect.ShowModal() == wxID_OK) {
		wxFileName filename(fileSelect.GetPath());
		if (!filename.DirExists()) {
			filename.Mkdir();
		}

		if (doSave) {
			wxFileName filename(fileSelect.GetPath());
			wxString ext = filename.GetExt();
			if (ext.Len() == 0)
				filename.SetExt(_("sim"));
			appController->SetConfigurationFilename(filename.GetFullPath(), false);
			appController->ClearCurrentLogEntries();
			pReporting->RefreshSettings();

			Save();
		}
	}

}

void MainFrame::Save() {
	Commit();
	if (appController->parameters.GetConfigFilename().length() == 0)
		SaveAs();
	else {
		if (!appController->parameters.WriteConfiguration())
			cerr<<"An error was detected during saving, but it didn't cause a specific message. \n";
	}
}

void MainFrame::OnSaveAsClick( wxCommandEvent& event )
{
	SaveAs();
}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for wxID_RESET
 */

void MainFrame::OnResetClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for wxID_RESET in MainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for wxID_RESET in MainFrame. 
}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT
 */

void MainFrame::OnExitClick( wxCommandEvent& event )
{

	bool doClose = true;
	if (HasChanged()) {
		wxDlgSaveCurrent dlg(this);
		int selection = dlg.ShowModal();
	
		switch (selection) {
			case wxID_SAVE:
				Save();
				break;
			case wxID_SAVEAS:
				SaveAs();
				break;
			case wxID_CANCEL:
				doClose = false;
				break;
			case wxID_CLOSE:
				break;
			default:
				break;
		}
	}

	if (doClose)
		Close();
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT in MainFrame.
    // Before editing this code, remove the block markers.
//    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT in MainFrame. 
}

bool MainFrame::VerifyForRun() {
	bool isReady=appController->parameters.GetConfigFilename().length() > 0;
	if (isReady)
		isReady=pageGeneralSettings->VerifyForRun();
	if (isReady)
		isReady=pageLdAnalysis->VerifyForRun();
	if (isReady)
		isReady=pageLociCreation->VerifyForRun();
	if (isReady)
		isReady=pageLocusReport->VerifyForRun();
	if (isReady)
		isReady=pReporting->VerifyForRun();
	return isReady;
}
/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MENU_LAUNCH
 */

void MainFrame::OnMenuLaunchClick( wxCommandEvent& event )
{

	if (!PromptForChanges())
		return;

	wxWizRunSimulation *window = new wxWizRunSimulation(this, false, appController, ID_WXWIZRUNSIMULATION);
	window->Run();
	window->Destroy();
	pReporting->RefreshSettings();
	
}




/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MENU_CONTINUE
 */

void MainFrame::OnMenuDetailedAnalysisClick( wxCommandEvent& event )
{
	cerr<<"MainFrame::OnMenuDetailedAnalysisClick()\n";
}


void MainFrame::OnContinueSimulation(wxCommandEvent& event) {
	if (!PromptForChanges())
		return;
	LogEntryData *data = pReporting->GetSelectedLogEntyData();
	appController->parameters.SetProjectName(data->entry.projectName.c_str());
	appController->parameters.SetStartingGeneration(data->entry.currentGeneration);

	wxWizRunSimulation *window = new wxWizRunSimulation(this, true, appController, ID_WXWIZRUNSIMULATION);
	window->Run();
	window->Destroy();
	pReporting->RefreshSettings();
}
void MainFrame::OnDetailedAnalysis(wxCommandEvent& event) {
	if (!PromptForChanges())
		return;
	LogEntryData *data = pReporting->GetSelectedLogEntyData();
	appController->parameters.SetProjectName(data->entry.projectName.c_str());
	appController->parameters.SetStartingGeneration(data->entry.currentGeneration);
	appController->AppendActiveEntry(data->entry);
	
	wxDlgProcessMonitor anl(this, appController);
	anl.ShowModal();
	
//	Refresh();
	pReporting->RefreshSettings();
}
void MainFrame::OpenReport(wxCommandEvent& event) {
	LogEntryData *data = pReporting->GetSelectedLogEntyData();
	if (!data->Open())
		event.Skip();
	
}

/**
 * Basically, we want to check for pages that have changes and prompt save Y/N
 * If choosing yes, save. If no, return false. If no save is required, return yes
 */
bool MainFrame::PromptForChanges() {
	bool requireSave = pageGeneralSettings->HasChanged() || 
		pageLdAnalysis->HasChanged() ||
		pageLociCreation->HasChanged();
	
	if (requireSave) {
		wxMessageBox(_("You must save your project before simulating"), _("Save Changes"),  wxICON_WARNING|wxOK, this);
		return false;
	}
	//Basically, if there is no need to save, then we are OK
	return true;
}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MENU_EXTRACT_DATASETS_GEN_0
 */

void MainFrame::OnMenuExtractDatasetsGen0Click( wxCommandEvent& event )
{

	if (!PromptForChanges())
		return;
//	LogEntryData *data = pReporting->GetSelectedLogEntyData();
	int curGen = 0;
	appController->parameters.SetProjectName(appController->parameters.GetConfigFilename().c_str());
	appController->parameters.SetStartingGeneration(0);

	stringstream ss;
	try {
		wxDialogTaskAlert *alert =  new wxDialogTaskAlert(this, false);
		alert->SetTitle("Please Wait");
		alert->SetMessage("Building initial pool");
		statusBar->PushStatusText(_("Building initial pool."));
		SetCursor(wxCursor(wxCURSOR_WAIT));
		appController->InitExecution();
		alert->Show();
		alert->WriteLog(_T(appController->GetSimOutput().c_str()));
		alert->Update();
		wxYield();
		do {
			wxMilliSleep(150);
			alert->WriteLog(_T(appController->GetSimOutput().c_str()));
			alert->Update();
			wxYield();
		} while (appController->SimIsRunning());

		SetCursor(wxCursor(wxCURSOR_ARROW));
		alert->Destroy();
		statusBar->PopStatusText();
	}
	catch (Utility::Exception::General& e) {
		SetCursor(wxCursor(wxCURSOR_ARROW));
		statusBar->PopStatusText();
		wxMessageBox(_(e.GetErrorMessage().c_str()), _T("Unable to Open Pool"), wxICON_WARNING|wxOK, this);
		return;
	}
	//If a problem was encountered during initialization, we can't go forward
	if (!appController->InitializationComplete())
		return;


	vector<FileBasedChromosome*> chroms;
	appController->LoadFileBasedChroms(chroms);


	wxWizardSimulateData *wizard = new wxWizardSimulateData(this);
	if (wizard->SetChromosomes(&chroms) ) {
		statusBar->PushStatusText("Creating Datasets");

		wizard->InitAppController(appController);

//		if (appController->continueRunning) 
			wizard->Run();
		wizard->Destroy();
		statusBar->PopStatusText();
	}
	else {
		wxMessageBox(_("There are no loci available to select as disease loci. Unable to continue."), _T("No available loci"), wxICON_ERROR|wxOK, this);
	}	

}
void MainFrame::ExtractData(wxCommandEvent& event) {
	if (!PromptForChanges())
		return;
	stringstream ss;

	LogEntryData *data = pReporting->GetSelectedLogEntyData();
	int curGen = data->entry.currentGeneration;
	int expressionCount = data->entry.expressionCount;
	appController->parameters.SetProjectName(data->entry.projectName.c_str());
	appController->parameters.SetStartingGeneration(curGen);

	if (expressionCount < 35000) {
		wxMessageBox(_("The pool is too small to draw data from. Please select a pool with a population of at least 35K expressions"), _("Invalid pool size"), wxICON_ERROR|wxOK, this);
		return;
	}

	try {
		appController->InitializeExecution(ss);
	}
	catch (Utility::Exception::General& e) {
		wxMessageBox(_(e.GetErrorMessage().c_str()), _T("Unable to Open Pool"), wxICON_WARNING|wxOK, this);
		return;
	}
	vector<FileBasedChromosome*> chroms;
	appController->LoadFileBasedChroms(chroms);

	wxWizardSimulateData *wizard = new wxWizardSimulateData(this);
	if (wizard->SetChromosomes(&chroms) ) {
		wizard->InitAppController(appController);
		wizard->Run();
		wizard->Destroy();
		int count = chroms.size();
		while (count-- > 0) {
			delete chroms[count];
		}
	}
	else {
		wxMessageBox(_("There are no loci available to select as disease loci. Unable to continue."), _T("No available loci"), wxICON_ERROR|wxOK, this);
	}
}

}

}



