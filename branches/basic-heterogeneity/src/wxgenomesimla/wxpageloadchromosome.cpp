/////////////////////////////////////////////////////////////////////////////
// Name:        wxpageloadchromosome.cpp
// Purpose:     
// Author:      Eric Torstenson
// Modified by: 
// Created:     Thu 06 Dec 2007 09:20:09 AM CST
// RCS-ID:      
// Copyright:   Copyright 2007 Ritchie Lab - See COPYING for License 
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Thu 06 Dec 2007 09:20:09 AM CST

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "wxpageloadchromosome.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "wxpanelchromosomerep.h"
////@end includes

#include "wxpageloadchromosome.h"
#include <string>
#include "utility/strings.h"
#include "wxgridloci.h"
#include <wx/filename.h>
////@begin XPM images
////@end XPM images

namespace GenomeSIM {

namespace GUI {

using namespace std;

/*!
 * wxPageLoadChromosome type definition
 */

IMPLEMENT_DYNAMIC_CLASS( wxPageLoadChromosome, wxPanel )

/*!
 * wxPageLoadChromosome event table definition
 */

BEGIN_EVENT_TABLE( wxPageLoadChromosome, wxPanel )
//	EVT_SIZE( wxPageLoadChromosome::RefreshSize )

////@begin wxPageLoadChromosome event table entries
    EVT_SIZE( wxPageLoadChromosome::OnSize )

    EVT_UPDATE_UI( wxID_STATIC, wxPageLoadChromosome::OnStaticUpdate )

    EVT_TEXT( ID_TXT_LOCUS_REPORT_FILENAME, wxPageLoadChromosome::OnTxtLocusReportFilenameUpdated )
    EVT_TEXT_ENTER( ID_TXT_LOCUS_REPORT_FILENAME, wxPageLoadChromosome::OnTxtLocusReportFilenameEnter )

    EVT_BUTTON( ID_CMD_SELECT_LOCUS_REPORT, wxPageLoadChromosome::OnCmdSelectLocusReportClick )

    EVT_TEXT( ID_TXT_CHROM_LABEL, wxPageLoadChromosome::OnTxtChromLabelTextUpdated )

    EVT_GRID_EDITOR_HIDDEN( wxPageLoadChromosome::OnEditorHidden )

////@end wxPageLoadChromosome event table entries

END_EVENT_TABLE()

/*!
 * wxPageLoadChromosome constructors
 */

wxPageLoadChromosome::wxPageLoadChromosome( ) : gridMaster(NULL)		{
}

wxPageLoadChromosome::wxPageLoadChromosome( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style ) : gridMaster(NULL)	{
    Create(parent, id, pos, size, style);
}


wxPageLoadChromosome::~wxPageLoadChromosome() {

}

void wxPageLoadChromosome::InitLabel(const char *label, uint chromID) {
//	txtChromLabel->ChangeValue(wxT(label));
	
}

bool wxPageLoadChromosome::SetChromosome(FileBasedChromosome *chrom) {
	this->chrom = chrom;
	return InitGrid();
}
void wxPageLoadChromosome::Commit() {
	hasChanged = false;
	gridMaster->SetStableState();
	//There really isn't anything we need to do here
}
bool wxPageLoadChromosome::InitGrid() {
	if (gridMaster) {
		delete gridMaster;
		cout<<"Deleting grid\n";
	}

	gridMaster = new wxGridLoci(&(chrom->GetLoci()));
	gridLoci->SetColLabelSize(40);
	gridLoci->SetTable(gridMaster, true);
	//This should fix the first few rows. Now, we want to stretch the description 
//	gridLoci->Fit();

	if (!chrom->HasValidFile() && !SelectLocusReport())
		return false;
	vector<Locus> loc = chrom->ExtractLoci();
	panelChromosome->SetLoci(loc);

	SetChromFilename(chrom->filename.c_str());
	txtChromLabel->ChangeValue(wxT(chrom->label.c_str()));
	gridMaster->SetStableState();
	RefreshSize();

	return true;
}

void wxPageLoadChromosome::RefreshSize() {
	int width, height;


	gridLoci->GetSize(&width, &height);
	width-=(gridLoci->GetRowLabelSize() + 20);
	width/=6;

	for (int i=0; i<6; i++) 
		gridLoci->SetColSize(i, width);
	gridLoci->ForceRefresh();

}

/*!
 * wxPageLoadChromosome creator
 */

bool wxPageLoadChromosome::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin wxPageLoadChromosome member initialisation
    txtLocusReportFilename = NULL;
    txtChromLabel = NULL;
    gridLoci = NULL;
    panelChromosome = NULL;
////@end wxPageLoadChromosome member initialisation

////@begin wxPageLoadChromosome creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end wxPageLoadChromosome creation

    return TRUE;
}

/*!
 * Control creation for wxPageLoadChromosome
 */

void wxPageLoadChromosome::CreateControls()
{    
////@begin wxPageLoadChromosome content construction
    wxPageLoadChromosome* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    itemBoxSizer2->Add(50, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer4 = new wxFlexGridSizer(2, 4, 0, 0);
    itemFlexGridSizer4->AddGrowableCol(0);
    itemBoxSizer2->Add(itemFlexGridSizer4, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemPanel1, wxID_STATIC, _("Locus Report Filename:"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    itemFlexGridSizer4->Add(itemStaticText5, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 0);

    itemFlexGridSizer4->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemFlexGridSizer4->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxStaticText* itemStaticText8 = new wxStaticText( itemPanel1, wxID_STATIC, _("Chromosome Label:"), wxDefaultPosition, wxSize(200, -1), wxALIGN_RIGHT );
    itemFlexGridSizer4->Add(itemStaticText8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 0);

    txtLocusReportFilename = new wxTextCtrl( itemPanel1, ID_TXT_LOCUS_REPORT_FILENAME, _T(""), wxDefaultPosition, wxSize(250, -1), wxTE_PROCESS_ENTER );
    if (wxPageLoadChromosome::ShowToolTips())
        txtLocusReportFilename->SetToolTip(_("Select the file you wish to use as a chromosome"));
    itemFlexGridSizer4->Add(txtLocusReportFilename, 1, wxALIGN_RIGHT|wxGROW|wxALL, 0);

    wxButton* itemButton10 = new wxButton( itemPanel1, ID_CMD_SELECT_LOCUS_REPORT, _("..."), wxDefaultPosition, wxSize(50, 25), 0 );
    if (wxPageLoadChromosome::ShowToolTips())
        itemButton10->SetToolTip(_("Browse for the locus report"));
    itemFlexGridSizer4->Add(itemButton10, 0, wxALIGN_LEFT|wxALIGN_BOTTOM|wxALL, 0);

    itemFlexGridSizer4->Add(10, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    txtChromLabel = new wxTextCtrl( itemPanel1, ID_TXT_CHROM_LABEL, _T(""), wxDefaultPosition, wxSize(250, -1), 0, wxTextValidator(wxFILTER_ALPHANUMERIC) );
    if (wxPageLoadChromosome::ShowToolTips())
        txtChromLabel->SetToolTip(_("Select the file you wish to use as a chromosome"));
    itemFlexGridSizer4->Add(txtChromLabel, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    gridLoci = new wxGrid( itemPanel1, ID_GRID1, wxDefaultPosition, wxSize(515, 75), wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    gridLoci->SetDefaultColSize(50);
    gridLoci->SetDefaultRowSize(25);
    gridLoci->SetColLabelSize(25);
    gridLoci->SetRowLabelSize(50);
    gridLoci->CreateGrid(5, 6, wxGrid::wxGridSelectCells);
    itemBoxSizer2->Add(gridLoci, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer14 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer14, 0, wxGROW|wxALL, 5);

    panelChromosome = new wxPanelChromosomeRep( itemPanel1, ID_CHROMOSOME_VISUAL, wxDefaultPosition, wxSize(-1, 32), wxRAISED_BORDER|wxTAB_TRAVERSAL );
    if (ShowToolTips())
        panelChromosome->SetToolTip(_("Click to Regenerate the Chromosome"));
    itemBoxSizer14->Add(panelChromosome, 1, wxGROW|wxALL, 0);

////@end wxPageLoadChromosome content construction
}

bool wxPageLoadChromosome::HasChanged() {
	return hasChanged || gridMaster->HasChanged();
}

/*!
 * Should we show tooltips?
 */

bool wxPageLoadChromosome::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap wxPageLoadChromosome::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxPageLoadChromosome bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end wxPageLoadChromosome bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon wxPageLoadChromosome::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxPageLoadChromosome icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end wxPageLoadChromosome icon retrieval
}
/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL
 */

void wxPageLoadChromosome::OnTxtLocusReportFilenameUpdated( wxCommandEvent& event )
{
	hasChanged = true;

////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL in wxPageLoadChromosome.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL in wxPageLoadChromosome. 
}

/*!
 * wxEVT_UPDATE_UI event handler for wxID_STATIC
 */

void wxPageLoadChromosome::OnStaticUpdate( wxUpdateUIEvent& event )
{
////@begin wxEVT_UPDATE_UI event handler for wxID_STATIC in wxPageLoadChromosome.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_UPDATE_UI event handler for wxID_STATIC in wxPageLoadChromosome. 
}


void wxPageLoadChromosome::SetChromFilename(const char *filename) {
	wxFileName relFilename (wxString(_(filename)));	
	relFilename.MakeRelativeTo(wxGetCwd());

	txtLocusReportFilename->ChangeValue(relFilename.GetFullPath().c_str());

}

bool wxPageLoadChromosome::SelectLocusReport() {
	bool success = false;

	size_t lociCount = chrom->GetLocusCount();
	if (chrom) {
		if (chrom->RequestFile()) {
			hasChanged = true;
			if (lociCount > 0)
				gridMaster->ClearTable(lociCount);
			string newFilename = chrom->filename;
			SetChromFilename(newFilename.c_str());

			wxString label = wxT(Utility::ExtractBaseFilename(newFilename.c_str()).c_str());
			txtChromLabel->ChangeValue(label);

			gridMaster->Refresh();

			chrom->label = label.c_str();
	
			if (chromosome)
				chromosome->SetLocSource(chrom->filename.c_str());

			success = true;
		}
	}
	return success;
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_SELECT_LOCUS_REPORT
 */
void wxPageLoadChromosome::OnCmdSelectLocusReportClick( wxCommandEvent& event )	{
	SelectLocusReport();
	vector<Locus> loc = chrom->ExtractLoci();
	panelChromosome->SetLoci(loc);

}


/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_LOCUS_REPORT_FILENAME
 */
void wxPageLoadChromosome::OnTxtLocusReportFilenameEnter( wxCommandEvent& event )	{
	hasChanged = true;
	wxString filename = txtChromLabel->GetLineText(0);
	chrom->filename = filename.c_str();
	event.Skip();
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_CHROM_LABEL
 */
void wxPageLoadChromosome::OnTxtChromLabelTextUpdated( wxCommandEvent& event )
{
	if (txtChromLabel) {
		hasChanged = true;
		wxString label = txtChromLabel->GetLineText(0);
		chrom->label = label.c_str();
		wxNotebook* mommy = (wxNotebook*)GetParent();
		if (mommy) 
			mommy->SetPageText(mommy->GetSelection(), label);
	}
	event.Skip();
}




/*!
 * wxEVT_SIZE event handler for ID_PAGE_LOAD_CHROMOSOME
 */
void wxPageLoadChromosome::OnSize( wxSizeEvent& event )
{	
	if (gridLoci) {
		gridLoci->Hide();
		RefreshSize();
		gridLoci->Show();
		event.Skip();
	}
}



/*!
 * wxEVT_GRID_EDITOR_HIDDEN event handler for ID_GRID1
 */
void wxPageLoadChromosome::OnEditorHidden( wxGridEvent& event )
{
////@begin wxEVT_GRID_EDITOR_HIDDEN event handler for ID_GRID1 in wxPageLoadChromosome.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_GRID_EDITOR_HIDDEN event handler for ID_GRID1 in wxPageLoadChromosome. 
}

}

}






/*!
 * wxPanelChromosomeRep type definition
 */

IMPLEMENT_DYNAMIC_CLASS( wxPanelChromosomeRep, wxPanel )


/*!
 * wxPanelChromosomeRep event table definition
 */

BEGIN_EVENT_TABLE( wxPanelChromosomeRep, wxPanel )

////@begin wxPanelChromosomeRep event table entries
    EVT_SIZE( wxPanelChromosomeRep::OnSize )
    EVT_PAINT( wxPanelChromosomeRep::OnPaint )
    EVT_MOTION( wxPanelChromosomeRep::OnMotion )

////@end wxPanelChromosomeRep event table entries

END_EVENT_TABLE()


/*!
 * wxPanelChromosomeRep constructors
 */

wxPanelChromosomeRep::wxPanelChromosomeRep()
{
    Init();
}

wxPanelChromosomeRep::wxPanelChromosomeRep(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * wxPanelChromosomeRep1 creator
 */

bool wxPanelChromosomeRep::Create(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
{
////@begin wxPanelChromosomeRep creation
    wxPanel::Create(parent, id, pos, size, style);
    CreateControls();
////@end wxPanelChromosomeRep creation
    return true;
}


/*!
 * wxPanelChromosomeRep destructor
 */

wxPanelChromosomeRep::~wxPanelChromosomeRep()
{
////@begin wxPanelChromosomeRep destruction
////@end wxPanelChromosomeRep destruction
}


/*!
 * Member initialisation
 */

void wxPanelChromosomeRep::Init()
{
////@begin wxPanelChromosomeRep member initialisation
////@end wxPanelChromosomeRep member initialisation
}


/*!
 * Control creation for wxPanelChromosomeRep1
 */

void wxPanelChromosomeRep::CreateControls()
{    
////@begin wxPanelChromosomeRep content construction
    if (ShowToolTips())
        this->SetToolTip(_("Click to Regenerate the Chromosome"));
////@end wxPanelChromosomeRep content construction
}


/*!
 * Should we show tooltips?
 */

bool wxPanelChromosomeRep::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap wxPanelChromosomeRep::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxPanelChromosomeRep bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end wxPanelChromosomeRep bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon wxPanelChromosomeRep::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxPanelChromosomeRep icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end wxPanelChromosomeRep icon retrieval
}


/*!
 * wxEVT_SIZE event handler for ID_CHROMOSOMEREP
 */

void wxPanelChromosomeRep::OnSize( wxSizeEvent& event )
{
////@begin wxEVT_SIZE event handler for ID_CHROMOSOMEREP in wxPanelChromosomeRep.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_SIZE event handler for ID_CHROMOSOMEREP in wxPanelChromosomeRep. 
}


/*!
 * wxEVT_PAINT event handler for ID_CHROMOSOMEREP
 */

void wxPanelChromosomeRep::OnPaint( wxPaintEvent& event )
{
////@begin wxEVT_PAINT event handler for ID_CHROMOSOMEREP in wxPanelChromosomeRep.
    // Before editing this code, remove the block markers.
    wxPaintDC dc(this);
////@end wxEVT_PAINT event handler for ID_CHROMOSOMEREP in wxPanelChromosomeRep. 
}


/*!
 * wxEVT_MOTION event handler for ID_CHROMOSOMEREP
 */

void wxPanelChromosomeRep::OnMotion( wxMouseEvent& event )
{
////@begin wxEVT_MOTION event handler for ID_CHROMOSOMEREP in wxPanelChromosomeRep.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_MOTION event handler for ID_CHROMOSOMEREP in wxPanelChromosomeRep. 
}

