//
// C++ Interface: biofilter
//
// Description: 
//
//
// Author: Eric Torstenson <torstees@torstensonx.mc.vanderbilt.edu>, (C) Marylyn Ritchie 2009
//
// Copyright: See COPYING file that comes with this distribution
//
//
#ifndef BIOFILTERBIOFILTER_H
#define BIOFILTERBIOFILTER_H

#include <string>
#include "appconfiguration.h"
#include "bioapplication.h"
namespace Biofilter {

/**
	@brief BiofilterApplication
	@author Eric Torstenson <torstees@torstensonx.mc.vanderbilt.edu>
*/
class Biofilter{
public:
    Biofilter();

    ~Biofilter();
	/**
	 * @brief Pass the arguments to the application object
	 */
	bool ParseCmdLine(int argc, char **argv);
	int ParseCmd(int curr, int argc, char **argv);
	void PrintHelp();				///< Display usage details
	void PrintBanner();				///< Display details about the software
	AppConfiguration *LoadConfiguration(const char *cfgFilename);
	void InitGroupData();			///< Loads the groups from the database
	std::vector<uint> LoadSNPs();

	void RunCommands();
	void RunModelReport();
	void FilterByGenes();
	void InjectGeneInformation();
	std::string GetReportFilename(const char *extension);
	void SnpToGeneMapReport();
protected:
	void DetailGeneCoverage();
	void SimpleGeneCoverage();
	std::string GetReportPrefix();
	AppConfiguration cfg;			///< Configuration object
	std::string configFilename;		///< Configuration filename
	BioApplication bioApp;			///< This does all the work


	struct BiofilterAction {
		enum Action {
			NoAction,				///< No particular action. This is the default
			ParseError,				///< Error loading configuration
			Optimize, 				///< Index key search tables
			StripOptimization,	///< Strip indexes to allow fast insertions (LD or db update)
			ListGroups,				///< List gorup IDs (optionally based on search)
			ListGenesSimple,		///< Lists the genes covered by one or more SNPs in the SNP source
			ListMetaGroups,		///< Display only metagroups and their IDs (useful for group filtering)
			ListPopulationIDs,	///< Lists available population IDs (for ld expansion)
			PrintSampleConfig,	///< Write sample configuration file
			ListModels,				///< Report on models that were generated by a previous run
			ExportSnpModels,		///< Export Snp-Snp models to binary file
			RunMarkerInfo,			///< Write marker info to std-out
			RunGeneCoverage,		///< Produce list of SNPs captured by a list of genes
			ProduceSnpReport,		///< Produce snp->gene report
			ListAssociations,		///< gene->group associations for a snp list
			GraphAssociations,		///< produce a dot graph describing gene->group associations
			ProduceModels,			///< Actual model production
			FilterByGenes,			///< Filter a SNP list by presence inside a gene
			InjectGeneInformation,///< Append gene information onto the end of a csv file
			BiofilterMapSnpToGenes, ///< Generate snp,gene,type mapping report
			ImportLdSplines,		///< Use LdSpline library to expand gene boundaries
			RunModelReport,
			SetVariationFilename ///< Used to fix the variation filename
		};
	};
	//The following flags indicate actions that don't utilize the data in 
	//quite the normal way. So, they generally should be performed separately
	//from model generation runs
	bool detailedCoverage;			///< Activate detailed coverage
	bool doLoadRegionAliases;		///< Load all aliases, and generate an alias file
	bool doWriteModelCounts;		///< Writes esimated model counts instead of writing models to file
	std::string ldConfiguration;	///< File associated with the ld settings
	BiofilterAction::Action action;///< Actual task to be performed
	std::stringstream reportLog;	///< Used to report which files have been created
	bool silentRun;					///< Used to silence the banner banter
};




}

#endif
