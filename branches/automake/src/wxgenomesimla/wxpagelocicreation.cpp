/////////////////////////////////////////////////////////////////////////////
// Name:        wxpagelocicreation.cpp
// Purpose:     
// Author:      Eric Torstenson
// Modified by: 
// Created:     Wed 05 Dec 2007 04:14:03 PM CST
// RCS-ID:      
// Copyright:   Copyright 2007 Ritchie Lab - See COPYING for License 
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Wed 05 Dec 2007 04:14:03 PM CST

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "wxpagelocicreation.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "wxpagelocicreation.h"
#include <string>
#include "wxpageinfo.h"
#include "wxpageloadchromosome.h"
#include "wxpagebbchrom.h"
#include "wxwizardcreatechromosome.h"

////@begin XPM images
#include "img/downloadc.xpm"
#include "img/downloadu.xpm"
#include "img/LD-Plot.xpm"
#include "img/LD-PlotBW.xpm"
#include "img/importc.xpm"
#include "img/importu.xpm"
////@end XPM images
namespace GenomeSIM {

namespace GUI {

using namespace std;

/*!
 * wxPageLociCreation type definition
 */

IMPLEMENT_DYNAMIC_CLASS( wxPageLociCreation, wxPanel )

/*!
 * wxPageLociCreation event table definition
 */

BEGIN_EVENT_TABLE( wxPageLociCreation, wxPanel )

////@begin wxPageLociCreation event table entries
    EVT_MENU( ID_CMD_DELETE_CHROM, wxPageLociCreation::OnCmdDeleteChromClick )

    EVT_MENU( ID_CMD_ADD_CHROM, wxPageLociCreation::OnCmdAddChromClick )

    EVT_MENU( ID_CMD_LOAD_CHROM, wxPageLociCreation::OnCmdLoadChromClick )

////@end wxPageLociCreation event table entries

END_EVENT_TABLE()

/*!
 * wxPageLociCreation constructors
 */

wxPageLociCreation::wxPageLociCreation( ) : hasChanged(false), chromosomeCount(0), chromosomes(NULL) {
}

wxPageLociCreation::wxPageLociCreation( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style ) : hasChanged(false), chromosomeCount(0), chromosomes(NULL) {
    Create(parent, id, pos, size, style);
}


wxPageLociCreation::~wxPageLociCreation() {
}


void wxPageLociCreation::InitAppController(AppController *ctrl) {
	appController = ctrl;
	defaultBlock = ctrl->parameters.GetDefaultBlock();
}

void wxPageLociCreation::Commit() {
	uint poolCount = chromPages.size();

	assert(poolCount == chromosomes->size());

	cout<<"Commiting "<<poolCount<<" pages\n";
	int i=0;
	while (poolCount > 0) {
		wxChromCfgDialog *pool = chromPages[--poolCount];
		pool->Commit();
		(*chromosomes)[i++]->Save();
	}

	hasChanged = false;
}

void wxPageLociCreation::RefreshSettings() {
	PoolManager *poolMgr = appController->parameters.GetConfiguration()->GetPoolManager();

	ChromPool *ch = poolMgr->GetChromosome(0);
	

	size_t pageCount = nbChromDisplay->GetPageCount();
	int pageIdx = 0;
	while (pageCount > 0) 
		nbChromDisplay->DeletePage(--pageCount);

	//Iterate over each of the chromosomes
	while (ch) {
		if (ch->GetType() == ChromPool::BlockBased) {
wxMessageBox(_("The GUI does not support block based chromosomes as part of the configuration and is ignoring one or more chromosomes which were block based. Users are encouraged to use the Chromosome creation dialog which allows the user to use blocks to create chromosomes, and see the results prior to usage!\n"));
/*

			wxWizardCreateChromosome *wizard = new wxWizardCreateChromosome(this);
			wizard->Initialize(chromosomeCount+1);
			wizard->Run();
	
			string filename = wizard->GetLocusFilename();
	
			wizard->Destroy();
	
			if (filename.length() > 0) {
			
				FileBasedChromosome *newChrom = new FileBasedChromosome(chromosomeCount, ExtractFilename(filename.c_str()).c_str(), filename.c_str());
				newChrom->Load();
				wxPageLoadChromosome *page = new wxPageLoadChromosome(nbChromDisplay, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL);
				
				page->SetChromosome(newChrom);
				chromosomes->push_back(newChrom);
				
				string label = page->Initialize((int)nbChromDisplay->GetPageCount() + 1);
				ChromPool *chrom = appController->parameters.LoadChromosomePool(page->txtLocusReportFilename->GetLineText(0).c_str(), page->txtChromLabel->GetLineText(0));
				page->SetPool(chrom);
			
				if (chromosomeCount == 0 && nbChromDisplay->GetPageCount() > 0) 
					nbChromDisplay->DeletePage(0);
			
				
				nbChromDisplay->AddPage(page, page->txtChromLabel->GetLineText(0));
				chromPages.push_back(page);
			
			
			
				nbChromDisplay->SetSelection(chromosomeCount);
				chromosomeCount++;
			}
			*/


		/* The following is needed to allow us to convert the blocks to the page
	 	 
			page->SetPool(ch);
			nbChromDisplay->AddPage(page, _T(ch->GetLabel().c_str()));
			chromPages.push_back(page);
			
			pageIdx++;

			ChromPool::BlockDefinition &block = ch->GetDefaultBlock();
//			SetDefaultBlock(block);
//			page->SetLabel(ch->GetLabel().c_str());

			size_t blockCount = ch->GetBlockCount();
			for (size_t i=0; i<blockCount; i++) {
				block = ch->GetBlock(i);
				page->AddBlock(block);
			}	
*/
		}
		
		else if (ch->GetType() == ChromPool::FileBased) {
		
			FileBasedChromosome *newChrom = new FileBasedChromosome(ch->GetID(), 
							ch->GetLabel().c_str(), ch->GetLocSource().c_str(), &(ch->GetLoci()));

			bool valid = newChrom->Load();

			if (!valid) {
				cout<<"Unable to load the chromosome file: "<<ch->GetLocSource().c_str()<<"\n";
				if (valid = newChrom->RequestFile())
					ch->SetLocSource(newChrom->filename.c_str());
				//We'll give them one chance to choose a valid path.

			}
			if (valid) {
				pageIdx++;
				wxPageLoadChromosome *page = new wxPageLoadChromosome(nbChromDisplay, wxID_ANY, 
							wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL);

				page->SetPool(ch);
	
				if (page->SetChromosome(newChrom)) {
					chromosomes->push_back(newChrom);
					nbChromDisplay->AddPage(page, _T(ch->GetLabel().c_str()));
					chromPages.push_back(page);
				}
			}
		}
		if (chromPages.size() > 0)
			nbChromDisplay->SetSelection(chromPages.size() - 1);
		//nbChromDisplay->SetSelection(chromosomeCount);
		
		//If we didn't add anything, we want to get rid of the chromosome
		if (chromosomeCount == chromPages.size())  
			poolMgr->DeleteChromosome(chromosomeCount);
		chromosomeCount = chromPages.size();
			
		ch = poolMgr->GetChromosome(chromosomeCount);		
	
	}

	if (chromosomeCount == 0)
		AddMessageBox("Add one or more chromosomes using the buttons below");

	
}

bool wxPageLociCreation::VerifyForRun() {
	PoolManager *poolMgr = appController->parameters.GetConfiguration()->GetPoolManager();
	bool isReady = poolMgr->GetPoolCount() > 0;

	size_t chromCount = chromosomes->size();
	for (size_t i=0; i<chromCount; i++) {
		FileBasedChromosome *ch = (*chromosomes)[i];
		isReady = isReady && ch->GetLocusCount() > 0;
	}

	if (!isReady)
		wxMessageBox(_("There are no loci associated with any chromosomes to simulate. Please check your locus configurations and try running again."), _("No Loci to simulate"), wxICON_WARNING|wxOK);
	return isReady;
}




bool wxPageLociCreation::HasChanged() {
	bool hasChanged = this->hasChanged; 
	if (!hasChanged) {

		uint poolCount = chromPages.size();
		int i=0;
		while (poolCount > 0) {
			wxChromCfgDialog *pool = chromPages[--poolCount];
			hasChanged = hasChanged || pool->HasChanged();
		}
		
	}
	return hasChanged;
}

/*!
 * wxPageLociCreation creator
 */

bool wxPageLociCreation::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin wxPageLociCreation member initialisation
    nbChromDisplay = NULL;
////@end wxPageLociCreation member initialisation

////@begin wxPageLociCreation creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    Centre();
////@end wxPageLociCreation creation

	AddMessageBox("Add one or more chromosomes using the buttons below");

    return TRUE;
}

/*!
 * Control creation for wxPageLociCreation
 */

void wxPageLociCreation::CreateControls()
{    
////@begin wxPageLociCreation content construction
    wxPageLociCreation* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer3->Add(itemBoxSizer4, 2, wxGROW|wxALL, 5);

    nbChromDisplay = new wxChoicebook( itemPanel1, ID_CHOICEBOOK1, wxDefaultPosition, wxSize(750, 300), wxCHB_DEFAULT );

    itemBoxSizer4->Add(nbChromDisplay, 2, wxGROW|wxALL, 0);

    wxToolBar* itemToolBar6 = new wxToolBar( itemPanel1, ID_TOOLBAR1, wxDefaultPosition, wxDefaultSize, wxTB_FLAT|wxTB_HORIZONTAL|wxTB_TEXT|wxTB_HORZ_LAYOUT );
    itemToolBar6->AddSeparator();
    wxBitmap itemtool8Bitmap(itemPanel1->GetBitmapResource(wxT("img/downloadc.xpm")));
    wxBitmap itemtool8BitmapDisabled(itemPanel1->GetBitmapResource(wxT("img/downloadu.xpm")));
    itemToolBar6->AddTool(ID_CMD_DELETE_CHROM, _("Delete"), itemtool8Bitmap, itemtool8BitmapDisabled, wxITEM_NORMAL, _("Delete current chromosome"), wxEmptyString);
    itemToolBar6->AddSeparator();
    wxBitmap itemtool10Bitmap(itemPanel1->GetBitmapResource(wxT("img/LD-Plot.xpm")));
    wxBitmap itemtool10BitmapDisabled(itemPanel1->GetBitmapResource(wxT("img/LD-PlotBW.xpm")));
    itemToolBar6->AddTool(ID_CMD_ADD_CHROM, _("Create"), itemtool10Bitmap, itemtool10BitmapDisabled, wxITEM_NORMAL, _("Create a new chromosome using our block configuration tool"), wxEmptyString);
    itemToolBar6->AddSeparator();
    wxBitmap itemtool12Bitmap(itemPanel1->GetBitmapResource(wxT("img/importc.xpm")));
    wxBitmap itemtool12BitmapDisabled(itemPanel1->GetBitmapResource(wxT("img/importu.xpm")));
    itemToolBar6->AddTool(ID_CMD_LOAD_CHROM, _("Load"), itemtool12Bitmap, itemtool12BitmapDisabled, wxITEM_NORMAL, _("Load a pre-existing chromosome from file (locus file)"), wxEmptyString);
    itemToolBar6->AddSeparator();
    itemToolBar6->Realize();
    itemBoxSizer2->Add(itemToolBar6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

////@end wxPageLociCreation content construction
}

/*!
 * Should we show tooltips?
 */

bool wxPageLociCreation::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap wxPageLociCreation::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin wxPageLociCreation bitmap retrieval
    wxUnusedVar(name);
    if (name == _T("img/downloadc.xpm"))
    {
        wxBitmap bitmap( downloadc_xpm);
        return bitmap;
    }
    else if (name == _T("img/downloadu.xpm"))
    {
        wxBitmap bitmap( downloadu_xpm);
        return bitmap;
    }
    else if (name == _T("img/LD-Plot.xpm"))
    {
        wxBitmap bitmap( LD_Plot_xpm);
        return bitmap;
    }
    else if (name == _T("img/LD-PlotBW.xpm"))
    {
        wxBitmap bitmap( LD_PlotBW_xpm);
        return bitmap;
    }
    else if (name == _T("img/importc.xpm"))
    {
        wxBitmap bitmap( importc_xpm);
        return bitmap;
    }
    else if (name == _T("img/importu.xpm"))
    {
        wxBitmap bitmap( importu_xpm);
        return bitmap;
    }
    return wxNullBitmap;
////@end wxPageLociCreation bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon wxPageLociCreation::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin wxPageLociCreation icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end wxPageLociCreation icon retrieval
}



void wxPageLociCreation::AddMessageBox(const char *msg) {
	wxPageInfo *page = new wxPageInfo(nbChromDisplay, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL);
	page->SetMessage(msg);
	nbChromDisplay->AddPage(page, _("Add Chromosomes"));
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_LOAD_CHROM
 */

void wxPageLociCreation::OnCmdLoadChromClick( wxCommandEvent& event )	{

	hasChanged = true;

	assert(chromosomes);

	FileBasedChromosome *newChrom = new FileBasedChromosome(chromosomeCount);


	wxPageLoadChromosome *page = new wxPageLoadChromosome(nbChromDisplay, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL);

	if (page->SetChromosome(newChrom)) {
		chromosomes->push_back(newChrom);
	
		string label = page->Initialize((int)nbChromDisplay->GetPageCount() + 1);
		ChromPool *chrom = appController->parameters.LoadChromosomePool(page->txtLocusReportFilename->GetLineText(0).c_str(), page->txtChromLabel->GetLineText(0));
		page->SetPool(chrom);

		if (chromosomeCount == 0 && nbChromDisplay->GetPageCount() > 0) 
			nbChromDisplay->DeletePage(0);

		
		nbChromDisplay->AddPage(page, page->txtChromLabel->GetLineText(0));
		chromPages.push_back(page);

	
	
		nbChromDisplay->SetSelection(chromosomeCount);
		chromosomeCount++;

	}
	else {
		delete newChrom;
		delete page;
	}

}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_ADD_CHROM
 */

void wxPageLociCreation::OnCmdAddChromClick( wxCommandEvent& event )
{
	hasChanged = true;
	wxWizardCreateChromosome *wizard = new wxWizardCreateChromosome(this);
	wizard->Initialize(chromosomeCount+1);
	wizard->Run();

	string filename = wizard->GetLocusFilename();

	wizard->Destroy();

	if (filename.length() > 0) {
		
		FileBasedChromosome *newChrom = new FileBasedChromosome(chromosomeCount, ExtractFilename(filename.c_str()).c_str(), filename.c_str());
		newChrom->Load();
		wxPageLoadChromosome *page = new wxPageLoadChromosome(nbChromDisplay, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL);
		
		page->SetChromosome(newChrom);
		chromosomes->push_back(newChrom);
		
		string label = page->Initialize((int)nbChromDisplay->GetPageCount() + 1);
		ChromPool *chrom = appController->parameters.LoadChromosomePool(page->txtLocusReportFilename->GetLineText(0).c_str(), page->txtChromLabel->GetLineText(0));
		page->SetPool(chrom);
	
		if (chromosomeCount == 0 && nbChromDisplay->GetPageCount() > 0) 
			nbChromDisplay->DeletePage(0);
	
		
		nbChromDisplay->AddPage(page, page->txtChromLabel->GetLineText(0));
		chromPages.push_back(page);
	
	
	
		nbChromDisplay->SetSelection(chromosomeCount);
		chromosomeCount++;
	
	}


	

	return;
/*	wxPageBBChrom *page = new wxPageBBChrom(nbChromDisplay, wxID_ANY, 
			wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL);

	string label = page->Initialize(chromosomeCount + 1);

	ChromPool *chrom = appController->parameters.AddChromosomePool(page->GetBlockCount(), *defaultBlock, label.c_str());
	page->SetPool(chrom);
	
	if (chromosomeCount == 0 && nbChromDisplay->GetPageCount() > 0) 
		nbChromDisplay->DeletePage(0);

	nbChromDisplay->AddPage(page, _(label.c_str()));
	chromPages.push_back(page);

	nbChromDisplay->SetSelection(chromosomeCount);
	chromosomeCount++;
	event.Skip();*/
}




/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_DELETE_CHROM
 */

void wxPageLociCreation::OnCmdDeleteChromClick( wxCommandEvent& event )
{
	if (chromosomeCount < 1)
		return;
	hasChanged = true;
	int selection = nbChromDisplay->GetSelection();

	if (selection >= 0) {
		nbChromDisplay->DeletePage(selection);
		appController->parameters.DeleteChromosomePool(selection);
		chromosomeCount--;
		
		{
			vector<wxChromCfgDialog*>::iterator itr = chromPages.begin();
			vector<wxChromCfgDialog*>::iterator end = chromPages.end();
	
			int curSelection = selection;
			while (curSelection-- > 0 && itr != end) 
				itr++;
			
			assert(itr != end);
			chromPages.erase(itr);
		}
		{
			vector<FileBasedChromosome *>::iterator itr = chromosomes->begin();
			vector<FileBasedChromosome *>::iterator end = chromosomes->end();

			int curSelection = selection;
			while (curSelection-- > 0 && itr != end) 
				itr++;

			assert(itr != end);
			chromosomes->erase(itr);
		}		
	}

	if (chromosomeCount == 0)
		AddMessageBox("Add one or more chromosomes using the buttons below");

		
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_DELETE_CHROM in wxPageLociCreation.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_DELETE_CHROM in wxPageLociCreation. 
}


}
}




