/////////////////////////////////////////////////////////////////////////////
// Name:        growthrateconfig.cpp
// Purpose:     
// Author:      Eric Torstenson
// Modified by: 
// Created:     Thu 29 Nov 2007 03:36:23 PM CST
// RCS-ID:      
// Copyright:   Copyright 2007 Ritchie Lab - See COPYING for License 
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Thu 29 Nov 2007 03:36:23 PM CST

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "growthrateconfig.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "growthrateconfig.h"

////@begin XPM images
////@end XPM images

/*!
 * GrowthCfg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( GenomeSIM::GUI::GrowthCfg, wxDialog )

/*!
 * GrowthCfg event table definition
 */

BEGIN_EVENT_TABLE( GenomeSIM::GUI::GrowthCfg, wxDialog )

////@begin GrowthCfg event table entries
    EVT_CHOICEBOOK_PAGE_CHANGED( ID_NB_GROWTH_DEFINITION, GrowthCfg::OnNbGrowthDefinitionPageChanged )
    EVT_CHOICEBOOK_PAGE_CHANGING( ID_NB_GROWTH_DEFINITION, GrowthCfg::OnNbGrowthDefinitionPageChanging )

    EVT_TEXT( ID_TXT_LIN_INITPOP, GrowthCfg::OnTxtLinInitpopUpdated )
    EVT_TEXT_ENTER( ID_TXT_LIN_INITPOP, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_LIN_GROWTH, GrowthCfg::OnTxtLinGrowthUpdated )
    EVT_TEXT_ENTER( ID_TXT_LIN_GROWTH, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_LIN_VARIATION, GrowthCfg::OnTxtLinVariationUpdated )
    EVT_TEXT_ENTER( ID_TXT_LIN_VARIATION, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_EXP_INITPOP, GrowthCfg::OnTxtExpInitpopUpdated )
    EVT_TEXT_ENTER( ID_TXT_EXP_INITPOP, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_EXP_GROWTH, GrowthCfg::OnTxtExpGrowthUpdated )
    EVT_TEXT_ENTER( ID_TXT_EXP_GROWTH, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_EXP_VAR, GrowthCfg::OnTxtExpVarUpdated )
    EVT_TEXT_ENTER( ID_TXT_EXP_VAR, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_LOG_INITPOP, GrowthCfg::OnTxtLogInitpopUpdated )
    EVT_TEXT_ENTER( ID_TXT_LOG_INITPOP, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_LOG_GROWTH, GrowthCfg::OnTxtLogGrowthUpdated )
    EVT_TEXT_ENTER( ID_TXT_LOG_GROWTH, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_LOG_VAR, GrowthCfg::OnTxtLogVarUpdated )
    EVT_TEXT_ENTER( ID_TXT_LOG_VAR, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_LOG_CARCAP, GrowthCfg::OnTxtLogCarcapUpdated )
    EVT_TEXT_ENTER( ID_TXT_LOG_CARCAP, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_RL_INITPOP, GrowthCfg::OnTxtRlInitpopUpdated )
    EVT_TEXT_ENTER( ID_TXT_RL_INITPOP, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_RL_GROWTH_RATE, GrowthCfg::OnTxtRlGrowthRateUpdated )
    EVT_TEXT_ENTER( ID_TXT_RL_GROWTH_RATE, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_RL_VAR, GrowthCfg::OnTxtRlVarUpdated )
    EVT_TEXT_ENTER( ID_TXT_RL_VAR, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_RL_CARCAP, GrowthCfg::OnTxtRlCarcapUpdated )
    EVT_TEXT_ENTER( ID_TXT_RL_CARCAP, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_RL_M, GrowthCfg::OnTxtRlMUpdated )
    EVT_TEXT_ENTER( ID_TXT_RL_M, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_RL_POLARITY, GrowthCfg::OnTxtRlPolarityUpdated )
    EVT_TEXT_ENTER( ID_TXT_RL_POLARITY, GrowthCfg::OnTxtEnter )

    EVT_UPDATE_UI( ID_HTML_GROWTH_REPORT, GrowthCfg::OnHtmlGrowthReportUpdate )

    EVT_TEXT( ID_TXT_STARTING_GEN, GrowthCfg::OnTxtStartingGenUpdated )
    EVT_TEXT_ENTER( ID_TXT_STARTING_GEN, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_FINAL_GEN, GrowthCfg::OnTxtFinalGenUpdated )
    EVT_TEXT_ENTER( ID_TXT_FINAL_GEN, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_GROWTH_CHART_INTERVAL, GrowthCfg::OnTxtGrowthChartIntervalUpdated )
    EVT_TEXT_ENTER( ID_TXT_GROWTH_CHART_INTERVAL, GrowthCfg::OnTxtEnter )

    EVT_TEXT( ID_TXT_MIN_POPSIZE, GrowthCfg::OnTxtMinPopsizeUpdated )

    EVT_TEXT( ID_TXT_MAX_POPSIZE, GrowthCfg::OnTxtMaxPopsizeUpdated )

    EVT_TEXT( ID_TXT_FORCE_DROP_POINT, GrowthCfg::OnTxtForceDropPointUpdated )

    EVT_BUTTON( wxID_REFRESH, GrowthCfg::OnRefreshClick )

////@end GrowthCfg event table entries
	EVT_BUTTON(wxID_OK, GrowthCfg::OnOkClick)
END_EVENT_TABLE()

namespace GenomeSIM {
namespace GUI {

/*!
 * GrowthCfg constructors
 */

GrowthCfg::GrowthCfg( ) : refreshImage(true)
{
	Init();
}

GrowthCfg::GrowthCfg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style ) : refreshImage(true)
{
    Create(parent, id, caption, pos, size, style);
	Init();
}

void GrowthCfg::Init() {
	cout<<"InitializingValues\n";
	RefreshControls(LinearGrowthRate);
	RefreshControls(ExponentialGrowthRate);
	RefreshControls(LogisticGrowthRate);
	RefreshControls(RichardsLogisticGrowthRate);
}

void GrowthCfg::RefreshControls(GrowthRateType control) {
	wxString txtValue;
	if (control == LinearGrowthRate) {
		txtValue.Printf(wxT("%f"), linearModel.GetGrowthRate());
		txtLinGrowthRate->ChangeValue(txtValue);

		txtValue.Printf(wxT("%d"), linearModel.GetInitialPopulationSize());
		txtLinInitPop->ChangeValue(txtValue);

		txtValue.Printf(wxT("%f"), linearModel.GetVariation());
		txtLinVariation->ChangeValue(txtValue);
	}
	else if (control == ExponentialGrowthRate) {
		txtValue.Printf(wxT("%f"), expModel.GetGrowthRate());
		txtExpGrowthRate->ChangeValue(txtValue);

		txtValue.Printf(wxT("%d"), expModel.GetInitialPopulationSize());
		txtExpInitPop->ChangeValue(txtValue);
		
		txtValue.Printf(wxT("%f"), expModel.GetVariation());
		txtExpVariation->ChangeValue(txtValue);
	}
	else if (control == LogisticGrowthRate) {
		txtValue.Printf(wxT("%f"), logModel.GetGrowthRate());
		txtLogGrowthRate->ChangeValue(txtValue);

		txtValue.Printf(wxT("%d"), logModel.GetInitialPopulationSize());
		txtLogInitPop->ChangeValue(txtValue);
		
		txtValue.Printf(wxT("%d"), logModel.GetCarryCapacity());
		txtLogCarryCap->ChangeValue(txtValue);

		txtValue.Printf(wxT("%f"), logModel.GetVariation());
		txtLogVariation->ChangeValue(txtValue);

	}
	else if (control == RichardsLogisticGrowthRate) {
		txtValue.Printf(wxT("%f"), -1.0 * richModel.GetGrowthRate());
		txtRLGrowth->ChangeValue(txtValue);
		
		txtValue.Printf(wxT("%d"), richModel.GetInitialPopulationSize());
		txtRLInitPop->ChangeValue(txtValue);

		cout<<"Carry Capacity: "<<richModel.GetCarryCapacity()<<"\n";
		
		txtValue.Printf(wxT("%d"), richModel.GetCarryCapacity());
		txtRLCarryCap->ChangeValue(txtValue);

		txtValue.Printf(wxT("%f"), richModel.GetPolarity());
		txtRLPolarity->ChangeValue(txtValue);

		txtValue.Printf(wxT("%f"), richModel.GetTimeOfMaxGrowth());
		txtRLMaxGrowth->ChangeValue(txtValue);

		txtValue.Printf(wxT("%f"), richModel.GetVariation());
		txtRLVariance->ChangeValue(txtValue);

	}
	nbGrowthDefinition->SetSelection((int)control);
}



string GrowthCfg::GetGrowthConfiguration() {
	wxString cfg;

	if (modelType == LinearGrowthRate) {
		cfg.Printf(wxT("GROWTH_RATE LINEAR %d %f %f"), linearModel.GetInitialPopulationSize(), 
				linearModel.GetVariation(), linearModel.GetGrowthRate());
	}
	else if (modelType == ExponentialGrowthRate) {
		cfg.Printf(wxT("GROWTH_RATE EXPONENTIAL %d %f %f"), expModel.GetInitialPopulationSize(), 
				expModel.GetVariation(), expModel.GetGrowthRate());
	}
	else if (modelType == LogisticGrowthRate) {
		cfg.Printf(wxT("GROWTH_RATE LOGISTIC %d %f %f %d"), logModel.GetInitialPopulationSize(), 
				logModel.GetVariation(), logModel.GetGrowthRate(), logModel.GetCarryCapacity());
	}
	else if (modelType == RichardsLogisticGrowthRate) {
		cfg.Printf(wxT("GROWTH_RATE RICHARDS %d %f %f %d %f %f"), richModel.GetInitialPopulationSize(), 
				richModel.GetVariation(), richModel.GetGrowthRate(), richModel.GetCarryCapacity(), 
				richModel.GetTimeOfMaxGrowth(), richModel.GetPolarity());
	}
	return cfg.c_str();
}

/*!
 * GrowthCfg creator
 */

bool GrowthCfg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin GrowthCfg member initialisation
    nbGrowthDefinition = NULL;
    txtLinInitPop = NULL;
    txtLinGrowthRate = NULL;
    txtLinVariation = NULL;
    txtExpInitPop = NULL;
    txtExpGrowthRate = NULL;
    txtExpVariation = NULL;
    txtLogInitPop = NULL;
    txtLogGrowthRate = NULL;
    txtLogVariation = NULL;
    txtLogCarryCap = NULL;
    txtRLInitPop = NULL;
    txtRLGrowth = NULL;
    txtRLVariance = NULL;
    txtRLCarryCap = NULL;
    txtRLMaxGrowth = NULL;
    txtRLPolarity = NULL;
    htmlGrowthReport = NULL;
    txtGrowthRateStartingGen = NULL;
    txtGrowthChartFinalGen = NULL;
    txtGrowthChartInterval = NULL;
    txtMinPopSize = NULL;
    txtMaxPopSize = NULL;
////@end GrowthCfg member initialisation
	txtForceDropPoint = NULL;
////@begin GrowthCfg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end GrowthCfg creation
    return TRUE;
}

/*!
 * Control creation for GrowthCfg
 */

void GrowthCfg::CreateControls()
{    
////@begin GrowthCfg content construction
    GrowthCfg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    nbGrowthDefinition = new wxChoicebook( itemDialog1, ID_NB_GROWTH_DEFINITION, wxDefaultPosition, wxSize(150, 530), wxCHB_TOP );

    wxPanel* itemPanel4 = new wxPanel( nbGrowthDefinition, ID_GROWTH_LINEAR, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxVERTICAL);
    itemPanel4->SetSizer(itemBoxSizer5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemPanel4, wxID_STATIC, _("Initial Population:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtLinInitPop = new wxTextCtrl( itemPanel4, ID_TXT_LIN_INITPOP, _("100000"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer5->Add(txtLinInitPop, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText9 = new wxStaticText( itemPanel4, wxID_STATIC, _("Growth Rate:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer5->Add(itemStaticText9, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtLinGrowthRate = new wxTextCtrl( itemPanel4, ID_TXT_LIN_GROWTH, _("5"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer5->Add(txtLinGrowthRate, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText12 = new wxStaticText( itemPanel4, wxID_STATIC, _("Variation:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText12, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtLinVariation = new wxTextCtrl( itemPanel4, ID_TXT_LIN_VARIATION, _("0.0"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer5->Add(txtLinVariation, 0, wxALIGN_LEFT|wxALL, 5);

    nbGrowthDefinition->AddPage(itemPanel4, _("Linear"));

    wxPanel* itemPanel14 = new wxPanel( nbGrowthDefinition, ID_GROWTH_EXPONENTIAL, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxVERTICAL);
    itemPanel14->SetSizer(itemBoxSizer15);

    wxStaticText* itemStaticText16 = new wxStaticText( itemPanel14, wxID_STATIC, _("Initial Population:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer15->Add(itemStaticText16, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtExpInitPop = new wxTextCtrl( itemPanel14, ID_TXT_EXP_INITPOP, _("1500"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer15->Add(txtExpInitPop, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer15->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText19 = new wxStaticText( itemPanel14, wxID_STATIC, _("Growth Rate:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer15->Add(itemStaticText19, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtExpGrowthRate = new wxTextCtrl( itemPanel14, ID_TXT_EXP_GROWTH, _("0.03"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer15->Add(txtExpGrowthRate, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer15->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText22 = new wxStaticText( itemPanel14, wxID_STATIC, _("Variation:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer15->Add(itemStaticText22, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtExpVariation = new wxTextCtrl( itemPanel14, ID_TXT_EXP_VAR, _("0.0"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer15->Add(txtExpVariation, 0, wxALIGN_LEFT|wxALL, 5);

    nbGrowthDefinition->AddPage(itemPanel14, _("Exponential"));

    wxPanel* itemPanel24 = new wxPanel( nbGrowthDefinition, ID_GROWTH_LOGISTIC, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer25 = new wxBoxSizer(wxVERTICAL);
    itemPanel24->SetSizer(itemBoxSizer25);

    wxStaticText* itemStaticText26 = new wxStaticText( itemPanel24, wxID_STATIC, _("Initial Population:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer25->Add(itemStaticText26, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtLogInitPop = new wxTextCtrl( itemPanel24, ID_TXT_LOG_INITPOP, _("750"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer25->Add(txtLogInitPop, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer25->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText29 = new wxStaticText( itemPanel24, wxID_STATIC, _("Growth Rate:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer25->Add(itemStaticText29, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtLogGrowthRate = new wxTextCtrl( itemPanel24, ID_TXT_LOG_GROWTH, _("0.03"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer25->Add(txtLogGrowthRate, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer25->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText32 = new wxStaticText( itemPanel24, wxID_STATIC, _("Variation:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer25->Add(itemStaticText32, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtLogVariation = new wxTextCtrl( itemPanel24, ID_TXT_LOG_VAR, _("0.0"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer25->Add(txtLogVariation, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer25->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText35 = new wxStaticText( itemPanel24, wxID_STATIC, _("Carry Capacity:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer25->Add(itemStaticText35, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtLogCarryCap = new wxTextCtrl( itemPanel24, ID_TXT_LOG_CARCAP, _("120000"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer25->Add(txtLogCarryCap, 0, wxALIGN_LEFT|wxALL, 5);

    nbGrowthDefinition->AddPage(itemPanel24, _("Logistic"));

    wxPanel* itemPanel37 = new wxPanel( nbGrowthDefinition, ID_GROWTH_RICHARD, wxDefaultPosition, wxSize(200, 500), wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer38 = new wxBoxSizer(wxVERTICAL);
    itemPanel37->SetSizer(itemBoxSizer38);

    wxBoxSizer* itemBoxSizer39 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer38->Add(itemBoxSizer39, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 10);
    wxStaticText* itemStaticText40 = new wxStaticText( itemPanel37, wxID_STATIC, _("Initial Population:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer39->Add(itemStaticText40, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtRLInitPop = new wxTextCtrl( itemPanel37, ID_TXT_RL_INITPOP, _("1500"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer39->Add(txtRLInitPop, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer39->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText43 = new wxStaticText( itemPanel37, wxID_STATIC, _("Growth Rate:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer39->Add(itemStaticText43, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtRLGrowth = new wxTextCtrl( itemPanel37, ID_TXT_RL_GROWTH_RATE, _("0.02"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer39->Add(txtRLGrowth, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer39->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText46 = new wxStaticText( itemPanel37, wxID_STATIC, _("Variation:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer39->Add(itemStaticText46, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtRLVariance = new wxTextCtrl( itemPanel37, ID_TXT_RL_VAR, _("0.0"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer39->Add(txtRLVariance, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer39->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText49 = new wxStaticText( itemPanel37, wxID_STATIC, _("Carry Capacity:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer39->Add(itemStaticText49, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtRLCarryCap = new wxTextCtrl( itemPanel37, ID_TXT_RL_CARCAP, _("120000"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer39->Add(txtRLCarryCap, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer39->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText52 = new wxStaticText( itemPanel37, wxID_STATIC, _("Time of \nMax. Growth"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer39->Add(itemStaticText52, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtRLMaxGrowth = new wxTextCtrl( itemPanel37, ID_TXT_RL_M, _("500"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer39->Add(txtRLMaxGrowth, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer39->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText55 = new wxStaticText( itemPanel37, wxID_STATIC, _("Polarity:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer39->Add(itemStaticText55, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    txtRLPolarity = new wxTextCtrl( itemPanel37, ID_TXT_RL_POLARITY, _("0.1"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer39->Add(txtRLPolarity, 0, wxALIGN_LEFT|wxALL, 5);

    nbGrowthDefinition->AddPage(itemPanel37, _("Richard's Logistic"));

    itemBoxSizer2->Add(nbGrowthDefinition, 1, wxGROW|wxALL, 0);

    wxBoxSizer* itemBoxSizer57 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer57, 4, wxGROW|wxALL|wxADJUST_MINSIZE, 5);

    htmlGrowthReport = new wxHtmlWindow( itemDialog1, ID_HTML_GROWTH_REPORT, wxDefaultPosition, wxSize(600, 200), wxHW_SCROLLBAR_AUTO|wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    itemBoxSizer57->Add(htmlGrowthReport, 3, wxGROW|wxALL|wxFIXED_MINSIZE, 0);

    wxBoxSizer* itemBoxSizer59 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer57->Add(itemBoxSizer59, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer60Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Growth Chart Bounds:"));
    wxStaticBoxSizer* itemStaticBoxSizer60 = new wxStaticBoxSizer(itemStaticBoxSizer60Static, wxVERTICAL);
    itemBoxSizer59->Add(itemStaticBoxSizer60, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer61 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer60->Add(itemBoxSizer61, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer62 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer61->Add(itemBoxSizer62, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText63 = new wxStaticText( itemDialog1, wxID_STATIC, _("Start:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer62->Add(itemStaticText63, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    txtGrowthRateStartingGen = new wxTextCtrl( itemDialog1, ID_TXT_STARTING_GEN, _("0"), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer62->Add(txtGrowthRateStartingGen, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer65 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer61->Add(itemBoxSizer65, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText66 = new wxStaticText( itemDialog1, wxID_STATIC, _("Last:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer65->Add(itemStaticText66, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    txtGrowthChartFinalGen = new wxTextCtrl( itemDialog1, ID_TXT_FINAL_GEN, _("500"), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer65->Add(txtGrowthChartFinalGen, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer68 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer61->Add(itemBoxSizer68, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText69 = new wxStaticText( itemDialog1, wxID_STATIC, _("Interval"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer68->Add(itemStaticText69, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    txtGrowthChartInterval = new wxTextCtrl( itemDialog1, ID_TXT_GROWTH_CHART_INTERVAL, _("50"), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer68->Add(txtGrowthChartInterval, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText71 = new wxStaticText( itemDialog1, wxID_STATIC, _("* These 3 controls are for presentation purposes only. \n  They will not affect the configuration in any way."), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer60->Add(itemStaticText71, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    wxBoxSizer* itemBoxSizer72 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer57->Add(itemBoxSizer72, 1, wxGROW|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer73Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Constraints"));
    wxStaticBoxSizer* itemStaticBoxSizer73 = new wxStaticBoxSizer(itemStaticBoxSizer73Static, wxHORIZONTAL);
    itemBoxSizer72->Add(itemStaticBoxSizer73, 0, wxALIGN_BOTTOM|wxALL, 5);

    wxBoxSizer* itemBoxSizer74 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer73->Add(itemBoxSizer74, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText75 = new wxStaticText( itemDialog1, wxID_STATIC, _("Min. Pop. Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer74->Add(itemStaticText75, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    txtMinPopSize = new wxTextCtrl( itemDialog1, ID_TXT_MIN_POPSIZE, _("500"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer74->Add(txtMinPopSize, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    itemStaticBoxSizer73->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer78 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer73->Add(itemBoxSizer78, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText79 = new wxStaticText( itemDialog1, wxID_STATIC, _("Max. Pop. Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer78->Add(itemStaticText79, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    txtMaxPopSize = new wxTextCtrl( itemDialog1, ID_TXT_MAX_POPSIZE, _("120000"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER, wxTextValidator(wxFILTER_NUMERIC) );
    itemBoxSizer78->Add(txtMaxPopSize, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    itemStaticBoxSizer73->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

 /*   wxBoxSizer* itemBoxSizer82 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer73->Add(itemBoxSizer82, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText83 = new wxStaticText( itemDialog1, wxID_STATIC, _("Force Drop Point:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer82->Add(itemStaticText83, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    txtForceDropPoint = new wxTextCtrl( itemDialog1, ID_TXT_FORCE_DROP_POINT, _("300000"), wxDefaultPosition, wxSize(100, -1), wxTE_PROCESS_ENTER );
    itemBoxSizer82->Add(txtForceDropPoint, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    itemBoxSizer72->Add(5, 5, 1, wxGROW|wxALL, 5);
*/
    wxBoxSizer* itemBoxSizer86 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer72->Add(itemBoxSizer86, 0, wxALIGN_BOTTOM|wxALL, 0);

    wxButton* itemButton87 = new wxButton( itemDialog1, wxID_REFRESH, _("Refresh"), wxDefaultPosition, wxSize(-1, 30), 0 );
    itemBoxSizer86->Add(itemButton87, 0, wxALIGN_RIGHT|wxALL, 5);

    wxButton* itemButton88 = new wxButton( itemDialog1, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxSize(-1, 30), 0 );
    itemBoxSizer86->Add(itemButton88, 0, wxALIGN_RIGHT|wxALL, 5);

    wxButton* itemButton89 = new wxButton( itemDialog1, wxID_OK, _("OK"), wxDefaultPosition, wxSize(-1, 30), 0 );
    itemBoxSizer86->Add(itemButton89, 0, wxALIGN_RIGHT|wxALL, 5);

////@end GrowthCfg content construction

	UpdateTextField(txtMaxPopSize, (int)GrowthRate::maxPoolSize);
	UpdateTextField(txtMinPopSize, (int)GrowthRate::minPoolSize);

}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_INITPOP
 */

void GrowthCfg::OnTxtRlInitpopUpdated( wxCommandEvent& event )
{
	long val;
	if (txtRLInitPop) {
		if (txtRLInitPop->GetLineText(0).ToLong(&val) )
			richModel.SetInitialPopulationSize(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_INITPOP in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_INITPOP in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_GROWTH_RATE
 */

void GrowthCfg::OnTxtRlGrowthRateUpdated( wxCommandEvent& event )
{
	double val;
	if (txtRLGrowth) {
		if (txtRLGrowth->GetLineText(0).ToDouble(&val) )
			richModel.SetGrowthRate(val * -1);
	}

////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_GROWTH_RATE in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_GROWTH_RATE in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_VAR
 */

void GrowthCfg::OnTxtRlVarUpdated( wxCommandEvent& event )
{
	double val;
	if (txtRLVariance) {
		if (txtRLVariance->GetLineText(0).ToDouble(&val) ) 
			richModel.SetVariation(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_VAR in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_VAR in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_CARCAP
 */

void GrowthCfg::OnTxtRlCarcapUpdated( wxCommandEvent& event )
{
	long val;
	if (txtRLCarryCap) {
		if (txtRLCarryCap->GetLineText(0).ToLong(&val)) 
			richModel.SetCarryCapacity(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_CARCAP in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_CARCAP in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_M
 */

void GrowthCfg::OnTxtRlMUpdated( wxCommandEvent& event )
{
	double val;
	if (txtRLMaxGrowth) {
	
		if (txtRLMaxGrowth->GetLineText(0).ToDouble(&val)) 
			richModel.SetTimeOfMaxGrowth(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_M in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_M in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_POLARITY
 */

void GrowthCfg::OnTxtRlPolarityUpdated( wxCommandEvent& event )
{
	double val;
	if (txtRLPolarity) {
		if (txtRLPolarity->GetLineText(0).ToDouble(&val)) 
			richModel.SetPolarity(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_POLARITY in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_RL_POLARITY in GrowthCfg. 
}










/*!
 * Should we show tooltips?
 */

bool GrowthCfg::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap GrowthCfg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin GrowthCfg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end GrowthCfg bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon GrowthCfg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin GrowthCfg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end GrowthCfg icon retrieval
}
/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_INITPOP
 */

void GrowthCfg::OnTxtLogInitpopUpdated( wxCommandEvent& event )
{
	if (txtLogInitPop) {
		long val;
		if (txtLogInitPop->GetLineText(0).ToLong(&val) ) 
			logModel.SetInitialPopulationSize(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_INITPOP in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_INITPOP in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_GROWTH
 */

void GrowthCfg::OnTxtLogGrowthUpdated( wxCommandEvent& event )
{
	if (txtLogGrowthRate) {
		double val;
		if (txtLogGrowthRate->GetLineText(0).ToDouble(&val)) 
			logModel.SetGrowthRate(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_GROWTH in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_GROWTH in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_VAR
 */

void GrowthCfg::OnTxtLogVarUpdated( wxCommandEvent& event )
{
	if (txtLogVariation) {
		double val;
		if (txtLogVariation->GetLineText(0).ToDouble(&val)) 
			logModel.SetVariation(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_VAR in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_VAR in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_CARCAP
 */

void GrowthCfg::OnTxtLogCarcapUpdated( wxCommandEvent& event )
{
	if (txtLogCarryCap) {
		double val;
		if (txtLogCarryCap->GetLineText(0).ToDouble(&val)) 	
			logModel.SetCarryCapacity(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_CARCAP in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LOG_CARCAP in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_INITPOP
 */

void GrowthCfg::OnTxtExpInitpopUpdated( wxCommandEvent& event )
{
	if (txtExpInitPop) {
		long val;
		if (txtExpInitPop->GetLineText(0).ToLong(&val))
			expModel.SetInitialPopulationSize(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_INITPOP in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_INITPOP in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_GROWTH
 */

void GrowthCfg::OnTxtExpGrowthUpdated( wxCommandEvent& event )
{
	if (txtExpGrowthRate) {
		double val = 0.0;
		if (txtExpGrowthRate->GetLineText(0).ToDouble(&val) )	{
			expModel.SetGrowthRate(val);
		}
	}

////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_GROWTH in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_GROWTH in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_VAR
 */

void GrowthCfg::OnTxtExpVarUpdated( wxCommandEvent& event )
{
	if (txtExpVariation) {
		double val;
		if (txtExpVariation->GetLineText(0).ToDouble(&val)) 
			expModel.SetVariation(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_VAR in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_EXP_VAR in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL7
 */

void GrowthCfg::OnTxtLinInitpopUpdated( wxCommandEvent& event )
{
	if (txtLinInitPop) {
		long val = 0;
		if (txtLinInitPop->GetLineText(0).ToLong(&val) )	{
			linearModel.SetInitialPopulationSize(val);
		}
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL7 in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL7 in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_MIN_POPSIZE
 */

void GrowthCfg::OnTxtMinPopsizeUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_MIN_POPSIZE in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_MIN_POPSIZE in GrowthCfg. 
}

void GrowthCfg::OnOkClick(wxCommandEvent &event) {
	GrowthRate::maxPoolSize = ExtractInteger(txtMaxPopSize);
	GrowthRate::minPoolSize = ExtractInteger(txtMinPopSize);

	if (Validate() && TransferDataFromWindow() ) {
		if ( IsModal() )
			EndModal(wxID_OK);
		else {
			SetReturnCode(wxID_OK);
			this->Show(false);
		}
	}	
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_MAX_POPSIZE
 */

void GrowthCfg::OnTxtMaxPopsizeUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_MAX_POPSIZE in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_MAX_POPSIZE in GrowthCfg. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_FORCE_DROP_POINT
 */

void GrowthCfg::OnTxtForceDropPointUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_FORCE_DROP_POINT in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_FORCE_DROP_POINT in GrowthCfg. 
}


			


/*!
 * wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED event handler for ID_TXT_LIN_INITPOP
 */

void GrowthCfg::OnNbGrowthDefinitionPageChanged( wxChoicebookEvent& event )
{
	int sel = event.GetSelection();
	if (sel > -1) {
		modelType = (GrowthRateType)sel;
		growthModel = rates[sel];
		refreshImage = true;
	}
////@begin wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED event handler for ID_TXT_LIN_INITPOP in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED event handler for ID_TXT_LIN_INITPOP in GrowthCfg. 
}




/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LIN_GROWTH
 */

void GrowthCfg::OnTxtLinGrowthUpdated( wxCommandEvent& event )
{
	if (txtLinGrowthRate) {
		double val = 0.0;
		if (txtLinGrowthRate->GetLineText(0).ToDouble(&val) )	{
			linearModel.SetGrowthRate(val);
		}
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LIN_GROWTH in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_LIN_GROWTH in GrowthCfg. 
}


/*!
 * wxEVT_UPDATE_UI event handler for ID_HTML_GROWTH_REPORT
 */

void GrowthCfg::OnHtmlGrowthReportUpdate( wxUpdateUIEvent& event )
{

	static bool hasWarnedAboutGrowth = false;

	if (refreshImage) {
		wxFileName tmpFilename;
		long start = 1, stop = 500, interval = 50;
		txtGrowthRateStartingGen->GetLineText(0).ToLong(&start);
		txtGrowthChartFinalGen->GetLineText(0).ToLong(&stop);
		txtGrowthChartInterval->GetLineText(0).ToLong(&interval);
		
		wxString filename = wxT(RefreshReport( "tmp", start, stop, interval).c_str());
		htmlGrowthReport->LoadFile(filename);

		refreshImage = false;

		long m;
		txtRLMaxGrowth->GetLineText(0).ToLong(&m);
		if (!hasWarnedAboutGrowth && modelType == RichardsLogisticGrowthRate && (m > stop || m < start)) {
			wxMessageDialog dlg(NULL, wxT("Generation at Max. Growth Lies Outside this Graph. Consider changing Start/Last Generation in Chart Boundaries to See Complete Graph"), wxT("Max Growth Out of Sight"), wxOK);
			dlg.ShowModal();
			hasWarnedAboutGrowth = true;
		}
			 
	}
			
////@begin wxEVT_UPDATE_UI event handler for ID_HTML_GROWTH_REPORT in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_UPDATE_UI event handler for ID_HTML_GROWTH_REPORT in GrowthCfg. 
}






/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_REFRESH
 */

void GrowthCfg::OnRefreshClick( wxCommandEvent& event )
{
	refreshImage = true;
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_REFRESH in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CMD_REFRESH in GrowthCfg. 
}





/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_STARTING_GEN
 */

void GrowthCfg::OnTxtStartingGenUpdated( wxCommandEvent& event )
{
		
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_STARTING_GEN in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_STARTING_GEN in GrowthCfg. 
}



/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL
 */

void GrowthCfg::OnTxtLinVariationUpdated( wxCommandEvent& event )
{
	if (txtLinVariation) {
		double val;
		if (txtLinVariation->GetLineText(0).ToDouble(&val)) 
			linearModel.SetVariation(val);
	}
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_GROWTH_CHART_INTERVAL
 */

void GrowthCfg::OnTxtGrowthChartIntervalUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_GROWTH_CHART_INTERVAL in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_GROWTH_CHART_INTERVAL in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_EXP_VAR
 */

void GrowthCfg::OnTxtEnter( wxCommandEvent& event )
{
	refreshImage = true;
////@begin wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_EXP_VAR in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_ENTER event handler for ID_TXT_EXP_VAR in GrowthCfg. 
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_FINAL_GEN
 */

void GrowthCfg::OnTxtFinalGenUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_FINAL_GEN in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TXT_FINAL_GEN in GrowthCfg. 
}
/*!
 * wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING event handler for ID_NB_GROWTH_DEFINITION
 */

void GrowthCfg::OnNbGrowthDefinitionPageChanging( wxChoicebookEvent& event )
{
	int sel = event.GetSelection();
	if (sel > -1) {
		modelType = (GrowthRateType)sel;
		growthModel = rates[sel];
		refreshImage = true;
	}

////@begin wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING event handler for ID_NB_GROWTH_DEFINITION in GrowthCfg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING event handler for ID_NB_GROWTH_DEFINITION in GrowthCfg. 
}



}
}






